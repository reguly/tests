//
// auto-generated by ops.py
//
//header
#define OPS_API 2
#define OPS_3D
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ int block0np0;
__constant__ int block0np1;
__constant__ int block0np2;
__constant__ double Delta0block0;
__constant__ double Delta1block0;
__constant__ double Delta2block0;
__constant__ int niter;
__constant__ double dt;
__constant__ double gama;
__constant__ double Minf;
__constant__ double Re;
__constant__ double Pr;
__constant__ double inv_0;
__constant__ double inv_1;
__constant__ double inv_2;
__constant__ double inv_3;
__constant__ double inv_4;
__constant__ double inv_5;
__constant__ double rc6;
__constant__ double rc7;
__constant__ double rc8;
__constant__ double rcinv9;
__constant__ double rc10;
__constant__ double rc11;
__constant__ double rcinv12;
__constant__ double rcinv13;
__constant__ double rcinv14;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"block0np0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np0), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np1), dat, dim*size));
  }
  else
  if (!strcmp(name,"block0np2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(block0np2), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta0block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta1block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta1block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"Delta2block0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Delta2block0), dat, dim*size));
  }
  else
  if (!strcmp(name,"niter")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(niter), dat, dim*size));
  }
  else
  if (!strcmp(name,"dt")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dt), dat, dim*size));
  }
  else
  if (!strcmp(name,"gama")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(gama), dat, dim*size));
  }
  else
  if (!strcmp(name,"Minf")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Minf), dat, dim*size));
  }
  else
  if (!strcmp(name,"Re")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Re), dat, dim*size));
  }
  else
  if (!strcmp(name,"Pr")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(Pr), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_0")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_0), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_1")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_1), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_2")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_2), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_3")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_3), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_4")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_4), dat, dim*size));
  }
  else
  if (!strcmp(name,"inv_5")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(inv_5), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc6")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc6), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc7")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc7), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc8")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc8), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv9")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv9), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc10")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc10), dat, dim*size));
  }
  else
  if (!strcmp(name,"rc11")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rc11), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv12")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv12), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv13")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv13), dat, dim*size));
  }
  else
  if (!strcmp(name,"rcinv14")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(rcinv14), dat, dim*size));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "opensbliblock00Kernel087_hip_kernel.cpp"
#include "opensbliblock00Kernel081_hip_kernel.cpp"
#include "opensbliblock00Kernel082_hip_kernel.cpp"
#include "opensbliblock00Kernel083_hip_kernel.cpp"
#include "opensbliblock00Kernel084_hip_kernel.cpp"
#include "opensbliblock00Kernel085_hip_kernel.cpp"
#include "opensbliblock00Kernel086_hip_kernel.cpp"
#include "opensbliblock00Kernel088_hip_kernel.cpp"
#include "opensbliblock00Kernel003_hip_kernel.cpp"
#include "opensbliblock00Kernel024_hip_kernel.cpp"
#include "opensbliblock00Kernel038_hip_kernel.cpp"
#include "opensbliblock00Kernel009_hip_kernel.cpp"
#include "opensbliblock00Kernel079_hip_kernel.cpp"
#include "opensbliblock00Kernel000_hip_kernel.cpp"
#include "opensbliblock00Kernel002_hip_kernel.cpp"
#include "opensbliblock00Kernel004_hip_kernel.cpp"
#include "opensbliblock00Kernel006_hip_kernel.cpp"
#include "opensbliblock00Kernel008_hip_kernel.cpp"
#include "opensbliblock00Kernel010_hip_kernel.cpp"
#include "opensbliblock00Kernel011_hip_kernel.cpp"
#include "opensbliblock00Kernel012_hip_kernel.cpp"
#include "opensbliblock00Kernel014_hip_kernel.cpp"
#include "opensbliblock00Kernel015_hip_kernel.cpp"
#include "opensbliblock00Kernel016_hip_kernel.cpp"
#include "opensbliblock00Kernel018_hip_kernel.cpp"
#include "opensbliblock00Kernel019_hip_kernel.cpp"
#include "opensbliblock00Kernel020_hip_kernel.cpp"
#include "opensbliblock00Kernel021_hip_kernel.cpp"
#include "opensbliblock00Kernel022_hip_kernel.cpp"
#include "opensbliblock00Kernel023_hip_kernel.cpp"
#include "opensbliblock00Kernel025_hip_kernel.cpp"
#include "opensbliblock00Kernel026_hip_kernel.cpp"
#include "opensbliblock00Kernel027_hip_kernel.cpp"
#include "opensbliblock00Kernel028_hip_kernel.cpp"
#include "opensbliblock00Kernel029_hip_kernel.cpp"
#include "opensbliblock00Kernel030_hip_kernel.cpp"
#include "opensbliblock00Kernel031_hip_kernel.cpp"
#include "opensbliblock00Kernel032_hip_kernel.cpp"
#include "opensbliblock00Kernel033_hip_kernel.cpp"
#include "opensbliblock00Kernel034_hip_kernel.cpp"
#include "opensbliblock00Kernel035_hip_kernel.cpp"
#include "opensbliblock00Kernel036_hip_kernel.cpp"
#include "opensbliblock00Kernel037_hip_kernel.cpp"
#include "opensbliblock00Kernel039_hip_kernel.cpp"
#include "opensbliblock00Kernel040_hip_kernel.cpp"
#include "opensbliblock00Kernel041_hip_kernel.cpp"
#include "opensbliblock00Kernel042_hip_kernel.cpp"
#include "opensbliblock00Kernel043_hip_kernel.cpp"
#include "opensbliblock00Kernel044_hip_kernel.cpp"
#include "opensbliblock00Kernel045_hip_kernel.cpp"
#include "opensbliblock00Kernel046_hip_kernel.cpp"
#include "opensbliblock00Kernel047_hip_kernel.cpp"
#include "opensbliblock00Kernel048_hip_kernel.cpp"
#include "opensbliblock00Kernel049_hip_kernel.cpp"
#include "opensbliblock00Kernel050_hip_kernel.cpp"
#include "opensbliblock00Kernel051_hip_kernel.cpp"
#include "opensbliblock00Kernel052_hip_kernel.cpp"
#include "opensbliblock00Kernel053_hip_kernel.cpp"
#include "opensbliblock00Kernel055_hip_kernel.cpp"
#include "opensbliblock00Kernel056_hip_kernel.cpp"
#include "opensbliblock00Kernel057_hip_kernel.cpp"
#include "opensbliblock00Kernel058_hip_kernel.cpp"
#include "opensbliblock00Kernel059_hip_kernel.cpp"
#include "opensbliblock00Kernel060_hip_kernel.cpp"
#include "opensbliblock00Kernel061_hip_kernel.cpp"
#include "opensbliblock00Kernel062_hip_kernel.cpp"
#include "opensbliblock00Kernel063_hip_kernel.cpp"
#include "opensbliblock00Kernel065_hip_kernel.cpp"
#include "opensbliblock00Kernel066_hip_kernel.cpp"
#include "opensbliblock00Kernel067_hip_kernel.cpp"
#include "opensbliblock00Kernel068_hip_kernel.cpp"
#include "opensbliblock00Kernel070_hip_kernel.cpp"
#include "opensbliblock00Kernel073_hip_kernel.cpp"
#include "opensbliblock00Kernel074_hip_kernel.cpp"
#include "opensbliblock00Kernel076_hip_kernel.cpp"
#include "opensbliblock00Kernel077_hip_kernel.cpp"
#include "opensbliblock00Kernel078_hip_kernel.cpp"
#include "opensbliblock00Kernel054_hip_kernel.cpp"
#include "opensbliblock00Kernel064_hip_kernel.cpp"
#include "opensbliblock00Kernel069_hip_kernel.cpp"
#include "opensbliblock00Kernel071_hip_kernel.cpp"
#include "opensbliblock00Kernel072_hip_kernel.cpp"
#include "opensbliblock00Kernel075_hip_kernel.cpp"
#include "opensbliblock00Kernel080_hip_kernel.cpp"
#include "opensbliblock00Kernel090_hip_kernel.cpp"
#include "opensbliblock00Kernel089_hip_kernel.cpp"

//
// auto-generated by ops.py
//

    #ifdef OCL_FMA_SWITCH_ON
    #define OCL_FMA 1
    #else
    #define OCL_FMA 0
    #endif


    static bool isbuilt_opensbliblock00Kernel051 = false;

    void buildOpenCLKernels_opensbliblock00Kernel051(OPS_instance *instance, int xdim0, int ydim0, int xdim1, int ydim1, int xdim2, int ydim2, int xdim3, int ydim3, int xdim4, int ydim4, int xdim5, int ydim5, int xdim6, int ydim6, int xdim7, int ydim7, int xdim8, int ydim8, int xdim9, int ydim9, int xdim10, int ydim10, int xdim11, int ydim11, int xdim12, int ydim12, int xdim13, int ydim13, int xdim14, int ydim14, int xdim15, int ydim15, int xdim16, int ydim16, int xdim17, int ydim17, int xdim18, int ydim18, int xdim19, int ydim19, int xdim20, int ydim20, int xdim21, int ydim21, int xdim22, int ydim22, int xdim23, int ydim23, int xdim24, int ydim24, int xdim25, int ydim25, int xdim26, int ydim26, int xdim27, int ydim27, int xdim28, int ydim28, int xdim29, int ydim29, int xdim30, int ydim30, int xdim31, int ydim31, int xdim32, int ydim32, int xdim33, int ydim33, int xdim34, int ydim34, int xdim35, int ydim35, int xdim36, int ydim36, int xdim37, int ydim37, int xdim38, int ydim38, int xdim39, int ydim39, int xdim40, int ydim40, int xdim41, int ydim41, int xdim42, int ydim42, int xdim43, int ydim43, int xdim44, int ydim44, int xdim45, int ydim45, int xdim46, int ydim46, int xdim47, int ydim47, int xdim48, int ydim48, int xdim49, int ydim49, int xdim50, int ydim50, int xdim51, int ydim51) {

      //int ocl_fma = OCL_FMA;
      if(!isbuilt_opensbliblock00Kernel051) {
        buildOpenCLKernels(instance);
        //clSafeCall( clUnloadCompiler() );
        cl_int ret;
        char* source_filename[1] = {(char*)"./OpenCL/opensbliblock00Kernel051.cl"};

        // Load the kernel source code into the array source_str
        FILE *fid;
        char *source_str[1] = {NULL};
        size_t source_size[1];

        for(int i=0; i<1; i++) {
          fid = fopen(source_filename[i], "r");
          if (!fid) {
            OPSException e(OPS_RUNTIME_ERROR, "Can't open the kernel source file: ");
            e << source_filename[i] << "\n";
            throw e;
          }

          source_str[i] = (char*)malloc(4*0x1000000);
          source_size[i] = fread(source_str[i], 1, 4*0x1000000, fid);
          if(source_size[i] != 4*0x1000000) {
            if (ferror(fid)) {
              OPSException e(OPS_RUNTIME_ERROR, "Error while reading kernel source file ");
              e << source_filename[i] << "\n";
              throw e;
            }
            if (feof(fid))
              instance->ostream() << "Kernel source file "<< source_filename[i] <<" succesfully read.\n";
          }
          fclose(fid);
        }

        instance->ostream() <<"Compiling opensbliblock00Kernel051 "<<OCL_FMA<<" source -- start \n";

          // Create a program from the source
          instance->opencl_instance->OPS_opencl_core.program = clCreateProgramWithSource(instance->opencl_instance->OPS_opencl_core.context, 1, (const char **) &source_str, (const size_t *) &source_size, &ret);
          clSafeCall( ret );

          // Build the program
          char buildOpts[255*52];
          char* pPath = NULL;
          pPath = getenv ("OPS_INSTALL_PATH");
          if (pPath!=NULL)
            if(OCL_FMA)
              sprintf(buildOpts,"-cl-mad-enable -DOCL_FMA -I%s/include -DOPS_WARPSIZE=%d  -Dxdim0_opensbliblock00Kernel051=%d  -Dydim0_opensbliblock00Kernel051=%d  -Dxdim1_opensbliblock00Kernel051=%d  -Dydim1_opensbliblock00Kernel051=%d  -Dxdim2_opensbliblock00Kernel051=%d  -Dydim2_opensbliblock00Kernel051=%d  -Dxdim3_opensbliblock00Kernel051=%d  -Dydim3_opensbliblock00Kernel051=%d  -Dxdim4_opensbliblock00Kernel051=%d  -Dydim4_opensbliblock00Kernel051=%d  -Dxdim5_opensbliblock00Kernel051=%d  -Dydim5_opensbliblock00Kernel051=%d  -Dxdim6_opensbliblock00Kernel051=%d  -Dydim6_opensbliblock00Kernel051=%d  -Dxdim7_opensbliblock00Kernel051=%d  -Dydim7_opensbliblock00Kernel051=%d  -Dxdim8_opensbliblock00Kernel051=%d  -Dydim8_opensbliblock00Kernel051=%d  -Dxdim9_opensbliblock00Kernel051=%d  -Dydim9_opensbliblock00Kernel051=%d  -Dxdim10_opensbliblock00Kernel051=%d  -Dydim10_opensbliblock00Kernel051=%d  -Dxdim11_opensbliblock00Kernel051=%d  -Dydim11_opensbliblock00Kernel051=%d  -Dxdim12_opensbliblock00Kernel051=%d  -Dydim12_opensbliblock00Kernel051=%d  -Dxdim13_opensbliblock00Kernel051=%d  -Dydim13_opensbliblock00Kernel051=%d  -Dxdim14_opensbliblock00Kernel051=%d  -Dydim14_opensbliblock00Kernel051=%d  -Dxdim15_opensbliblock00Kernel051=%d  -Dydim15_opensbliblock00Kernel051=%d  -Dxdim16_opensbliblock00Kernel051=%d  -Dydim16_opensbliblock00Kernel051=%d  -Dxdim17_opensbliblock00Kernel051=%d  -Dydim17_opensbliblock00Kernel051=%d  -Dxdim18_opensbliblock00Kernel051=%d  -Dydim18_opensbliblock00Kernel051=%d  -Dxdim19_opensbliblock00Kernel051=%d  -Dydim19_opensbliblock00Kernel051=%d  -Dxdim20_opensbliblock00Kernel051=%d  -Dydim20_opensbliblock00Kernel051=%d  -Dxdim21_opensbliblock00Kernel051=%d  -Dydim21_opensbliblock00Kernel051=%d  -Dxdim22_opensbliblock00Kernel051=%d  -Dydim22_opensbliblock00Kernel051=%d  -Dxdim23_opensbliblock00Kernel051=%d  -Dydim23_opensbliblock00Kernel051=%d  -Dxdim24_opensbliblock00Kernel051=%d  -Dydim24_opensbliblock00Kernel051=%d  -Dxdim25_opensbliblock00Kernel051=%d  -Dydim25_opensbliblock00Kernel051=%d  -Dxdim26_opensbliblock00Kernel051=%d  -Dydim26_opensbliblock00Kernel051=%d  -Dxdim27_opensbliblock00Kernel051=%d  -Dydim27_opensbliblock00Kernel051=%d  -Dxdim28_opensbliblock00Kernel051=%d  -Dydim28_opensbliblock00Kernel051=%d  -Dxdim29_opensbliblock00Kernel051=%d  -Dydim29_opensbliblock00Kernel051=%d  -Dxdim30_opensbliblock00Kernel051=%d  -Dydim30_opensbliblock00Kernel051=%d  -Dxdim31_opensbliblock00Kernel051=%d  -Dydim31_opensbliblock00Kernel051=%d  -Dxdim32_opensbliblock00Kernel051=%d  -Dydim32_opensbliblock00Kernel051=%d  -Dxdim33_opensbliblock00Kernel051=%d  -Dydim33_opensbliblock00Kernel051=%d  -Dxdim34_opensbliblock00Kernel051=%d  -Dydim34_opensbliblock00Kernel051=%d  -Dxdim35_opensbliblock00Kernel051=%d  -Dydim35_opensbliblock00Kernel051=%d  -Dxdim36_opensbliblock00Kernel051=%d  -Dydim36_opensbliblock00Kernel051=%d  -Dxdim37_opensbliblock00Kernel051=%d  -Dydim37_opensbliblock00Kernel051=%d  -Dxdim38_opensbliblock00Kernel051=%d  -Dydim38_opensbliblock00Kernel051=%d  -Dxdim39_opensbliblock00Kernel051=%d  -Dydim39_opensbliblock00Kernel051=%d  -Dxdim40_opensbliblock00Kernel051=%d  -Dydim40_opensbliblock00Kernel051=%d  -Dxdim41_opensbliblock00Kernel051=%d  -Dydim41_opensbliblock00Kernel051=%d  -Dxdim42_opensbliblock00Kernel051=%d  -Dydim42_opensbliblock00Kernel051=%d  -Dxdim43_opensbliblock00Kernel051=%d  -Dydim43_opensbliblock00Kernel051=%d  -Dxdim44_opensbliblock00Kernel051=%d  -Dydim44_opensbliblock00Kernel051=%d  -Dxdim45_opensbliblock00Kernel051=%d  -Dydim45_opensbliblock00Kernel051=%d  -Dxdim46_opensbliblock00Kernel051=%d  -Dydim46_opensbliblock00Kernel051=%d  -Dxdim47_opensbliblock00Kernel051=%d  -Dydim47_opensbliblock00Kernel051=%d  -Dxdim48_opensbliblock00Kernel051=%d  -Dydim48_opensbliblock00Kernel051=%d  -Dxdim49_opensbliblock00Kernel051=%d  -Dydim49_opensbliblock00Kernel051=%d  -Dxdim50_opensbliblock00Kernel051=%d  -Dydim50_opensbliblock00Kernel051=%d  -Dxdim51_opensbliblock00Kernel051=%d  -Dydim51_opensbliblock00Kernel051=%d ", pPath, 32,xdim0,ydim0,xdim1,ydim1,xdim2,ydim2,xdim3,ydim3,xdim4,ydim4,xdim5,ydim5,xdim6,ydim6,xdim7,ydim7,xdim8,ydim8,xdim9,ydim9,xdim10,ydim10,xdim11,ydim11,xdim12,ydim12,xdim13,ydim13,xdim14,ydim14,xdim15,ydim15,xdim16,ydim16,xdim17,ydim17,xdim18,ydim18,xdim19,ydim19,xdim20,ydim20,xdim21,ydim21,xdim22,ydim22,xdim23,ydim23,xdim24,ydim24,xdim25,ydim25,xdim26,ydim26,xdim27,ydim27,xdim28,ydim28,xdim29,ydim29,xdim30,ydim30,xdim31,ydim31,xdim32,ydim32,xdim33,ydim33,xdim34,ydim34,xdim35,ydim35,xdim36,ydim36,xdim37,ydim37,xdim38,ydim38,xdim39,ydim39,xdim40,ydim40,xdim41,ydim41,xdim42,ydim42,xdim43,ydim43,xdim44,ydim44,xdim45,ydim45,xdim46,ydim46,xdim47,ydim47,xdim48,ydim48,xdim49,ydim49,xdim50,ydim50,xdim51,ydim51);
            else
              sprintf(buildOpts,"-cl-mad-enable -I%s/include -DOPS_WARPSIZE=%d  -Dxdim0_opensbliblock00Kernel051=%d  -Dydim0_opensbliblock00Kernel051=%d  -Dxdim1_opensbliblock00Kernel051=%d  -Dydim1_opensbliblock00Kernel051=%d  -Dxdim2_opensbliblock00Kernel051=%d  -Dydim2_opensbliblock00Kernel051=%d  -Dxdim3_opensbliblock00Kernel051=%d  -Dydim3_opensbliblock00Kernel051=%d  -Dxdim4_opensbliblock00Kernel051=%d  -Dydim4_opensbliblock00Kernel051=%d  -Dxdim5_opensbliblock00Kernel051=%d  -Dydim5_opensbliblock00Kernel051=%d  -Dxdim6_opensbliblock00Kernel051=%d  -Dydim6_opensbliblock00Kernel051=%d  -Dxdim7_opensbliblock00Kernel051=%d  -Dydim7_opensbliblock00Kernel051=%d  -Dxdim8_opensbliblock00Kernel051=%d  -Dydim8_opensbliblock00Kernel051=%d  -Dxdim9_opensbliblock00Kernel051=%d  -Dydim9_opensbliblock00Kernel051=%d  -Dxdim10_opensbliblock00Kernel051=%d  -Dydim10_opensbliblock00Kernel051=%d  -Dxdim11_opensbliblock00Kernel051=%d  -Dydim11_opensbliblock00Kernel051=%d  -Dxdim12_opensbliblock00Kernel051=%d  -Dydim12_opensbliblock00Kernel051=%d  -Dxdim13_opensbliblock00Kernel051=%d  -Dydim13_opensbliblock00Kernel051=%d  -Dxdim14_opensbliblock00Kernel051=%d  -Dydim14_opensbliblock00Kernel051=%d  -Dxdim15_opensbliblock00Kernel051=%d  -Dydim15_opensbliblock00Kernel051=%d  -Dxdim16_opensbliblock00Kernel051=%d  -Dydim16_opensbliblock00Kernel051=%d  -Dxdim17_opensbliblock00Kernel051=%d  -Dydim17_opensbliblock00Kernel051=%d  -Dxdim18_opensbliblock00Kernel051=%d  -Dydim18_opensbliblock00Kernel051=%d  -Dxdim19_opensbliblock00Kernel051=%d  -Dydim19_opensbliblock00Kernel051=%d  -Dxdim20_opensbliblock00Kernel051=%d  -Dydim20_opensbliblock00Kernel051=%d  -Dxdim21_opensbliblock00Kernel051=%d  -Dydim21_opensbliblock00Kernel051=%d  -Dxdim22_opensbliblock00Kernel051=%d  -Dydim22_opensbliblock00Kernel051=%d  -Dxdim23_opensbliblock00Kernel051=%d  -Dydim23_opensbliblock00Kernel051=%d  -Dxdim24_opensbliblock00Kernel051=%d  -Dydim24_opensbliblock00Kernel051=%d  -Dxdim25_opensbliblock00Kernel051=%d  -Dydim25_opensbliblock00Kernel051=%d  -Dxdim26_opensbliblock00Kernel051=%d  -Dydim26_opensbliblock00Kernel051=%d  -Dxdim27_opensbliblock00Kernel051=%d  -Dydim27_opensbliblock00Kernel051=%d  -Dxdim28_opensbliblock00Kernel051=%d  -Dydim28_opensbliblock00Kernel051=%d  -Dxdim29_opensbliblock00Kernel051=%d  -Dydim29_opensbliblock00Kernel051=%d  -Dxdim30_opensbliblock00Kernel051=%d  -Dydim30_opensbliblock00Kernel051=%d  -Dxdim31_opensbliblock00Kernel051=%d  -Dydim31_opensbliblock00Kernel051=%d  -Dxdim32_opensbliblock00Kernel051=%d  -Dydim32_opensbliblock00Kernel051=%d  -Dxdim33_opensbliblock00Kernel051=%d  -Dydim33_opensbliblock00Kernel051=%d  -Dxdim34_opensbliblock00Kernel051=%d  -Dydim34_opensbliblock00Kernel051=%d  -Dxdim35_opensbliblock00Kernel051=%d  -Dydim35_opensbliblock00Kernel051=%d  -Dxdim36_opensbliblock00Kernel051=%d  -Dydim36_opensbliblock00Kernel051=%d  -Dxdim37_opensbliblock00Kernel051=%d  -Dydim37_opensbliblock00Kernel051=%d  -Dxdim38_opensbliblock00Kernel051=%d  -Dydim38_opensbliblock00Kernel051=%d  -Dxdim39_opensbliblock00Kernel051=%d  -Dydim39_opensbliblock00Kernel051=%d  -Dxdim40_opensbliblock00Kernel051=%d  -Dydim40_opensbliblock00Kernel051=%d  -Dxdim41_opensbliblock00Kernel051=%d  -Dydim41_opensbliblock00Kernel051=%d  -Dxdim42_opensbliblock00Kernel051=%d  -Dydim42_opensbliblock00Kernel051=%d  -Dxdim43_opensbliblock00Kernel051=%d  -Dydim43_opensbliblock00Kernel051=%d  -Dxdim44_opensbliblock00Kernel051=%d  -Dydim44_opensbliblock00Kernel051=%d  -Dxdim45_opensbliblock00Kernel051=%d  -Dydim45_opensbliblock00Kernel051=%d  -Dxdim46_opensbliblock00Kernel051=%d  -Dydim46_opensbliblock00Kernel051=%d  -Dxdim47_opensbliblock00Kernel051=%d  -Dydim47_opensbliblock00Kernel051=%d  -Dxdim48_opensbliblock00Kernel051=%d  -Dydim48_opensbliblock00Kernel051=%d  -Dxdim49_opensbliblock00Kernel051=%d  -Dydim49_opensbliblock00Kernel051=%d  -Dxdim50_opensbliblock00Kernel051=%d  -Dydim50_opensbliblock00Kernel051=%d  -Dxdim51_opensbliblock00Kernel051=%d  -Dydim51_opensbliblock00Kernel051=%d ", pPath, 32,xdim0,ydim0,xdim1,ydim1,xdim2,ydim2,xdim3,ydim3,xdim4,ydim4,xdim5,ydim5,xdim6,ydim6,xdim7,ydim7,xdim8,ydim8,xdim9,ydim9,xdim10,ydim10,xdim11,ydim11,xdim12,ydim12,xdim13,ydim13,xdim14,ydim14,xdim15,ydim15,xdim16,ydim16,xdim17,ydim17,xdim18,ydim18,xdim19,ydim19,xdim20,ydim20,xdim21,ydim21,xdim22,ydim22,xdim23,ydim23,xdim24,ydim24,xdim25,ydim25,xdim26,ydim26,xdim27,ydim27,xdim28,ydim28,xdim29,ydim29,xdim30,ydim30,xdim31,ydim31,xdim32,ydim32,xdim33,ydim33,xdim34,ydim34,xdim35,ydim35,xdim36,ydim36,xdim37,ydim37,xdim38,ydim38,xdim39,ydim39,xdim40,ydim40,xdim41,ydim41,xdim42,ydim42,xdim43,ydim43,xdim44,ydim44,xdim45,ydim45,xdim46,ydim46,xdim47,ydim47,xdim48,ydim48,xdim49,ydim49,xdim50,ydim50,xdim51,ydim51);
          else {
            sprintf((char*)"Incorrect OPS_INSTALL_PATH %s\n",pPath);
            exit(EXIT_FAILURE);
          }

          #ifdef OPS_SOA
          sprintf(buildOpts, "%s -DOPS_SOA", buildOpts);
          #endif
          sprintf(buildOpts, "%s -I%s/c/include", buildOpts, pPath);
          ret = clBuildProgram(instance->opencl_instance->OPS_opencl_core.program, 1, &instance->opencl_instance->OPS_opencl_core.device_id, buildOpts, NULL, NULL);

          if(ret != CL_SUCCESS) {
            char* build_log;
            size_t log_size;
            clSafeCall( clGetProgramBuildInfo(instance->opencl_instance->OPS_opencl_core.program, instance->opencl_instance->OPS_opencl_core.device_id, CL_PROGRAM_BUILD_LOG, 0, NULL, &log_size) );
            build_log = (char*) malloc(log_size+1);
            clSafeCall( clGetProgramBuildInfo(instance->opencl_instance->OPS_opencl_core.program, instance->opencl_instance->OPS_opencl_core.device_id, CL_PROGRAM_BUILD_LOG, log_size, build_log, NULL) );
            build_log[log_size] = '\0';
            instance->ostream() << "=============== OpenCL Program Build Info ================\n\n" << build_log;
            instance->ostream() << "\n========================================================= \n";
            free(build_log);
            exit(EXIT_FAILURE);
          }
          instance->ostream() << "compiling opensbliblock00Kernel051 -- done\n";

        // Create the OpenCL kernel
        instance->opencl_instance->OPS_opencl_core.kernel[55] = clCreateKernel(instance->opencl_instance->OPS_opencl_core.program, "ops_opensbliblock00Kernel051", &ret);
        clSafeCall( ret );

        isbuilt_opensbliblock00Kernel051 = true;
        free(source_str[0]);
      }

    }

    
// host stub function
void ops_par_loop_opensbliblock00Kernel051(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6, ops_arg arg7, ops_arg arg8,
 ops_arg arg9, ops_arg arg10, ops_arg arg11, ops_arg arg12, ops_arg arg13,
 ops_arg arg14, ops_arg arg15, ops_arg arg16, ops_arg arg17, ops_arg arg18,
 ops_arg arg19, ops_arg arg20, ops_arg arg21, ops_arg arg22, ops_arg arg23,
 ops_arg arg24, ops_arg arg25, ops_arg arg26, ops_arg arg27, ops_arg arg28,
 ops_arg arg29, ops_arg arg30, ops_arg arg31, ops_arg arg32, ops_arg arg33,
 ops_arg arg34, ops_arg arg35, ops_arg arg36, ops_arg arg37, ops_arg arg38,
 ops_arg arg39, ops_arg arg40, ops_arg arg41, ops_arg arg42, ops_arg arg43,
 ops_arg arg44, ops_arg arg45, ops_arg arg46, ops_arg arg47, ops_arg arg48,
 ops_arg arg49, ops_arg arg50, ops_arg arg51) {

  //Timing
  double t1,t2,c1,c2;

  ops_arg args[52] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,52,range,55)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,55,"opensbliblock00Kernel051");
    block->instance->OPS_kernels[55].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  #ifdef OPS_MPI
  sub_block_list sb = OPS_sub_block_list[block->index];
  if (!sb->owned) return;
  for ( int n=0; n<3; n++ ){
    start[n] = sb->decomp_disp[n];end[n] = sb->decomp_disp[n]+sb->decomp_size[n];
    if (start[n] >= range[2*n]) {
      start[n] = 0;
    }
    else {
      start[n] = range[2*n] - start[n];
    }
    if (sb->id_m[n]==MPI_PROC_NULL && range[2*n] < 0) start[n] = range[2*n];
    if (end[n] >= range[2*n+1]) {
      end[n] = range[2*n+1] - sb->decomp_disp[n];
    }
    else {
      end[n] = sb->decomp_size[n];
    }
    if (sb->id_p[n]==MPI_PROC_NULL && (range[2*n+1] > sb->decomp_disp[n]+sb->decomp_size[n]))
      end[n] += (range[2*n+1]-sb->decomp_disp[n]-sb->decomp_size[n]);
  }
  #else
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #endif

  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);


  int xdim0 = args[0].dat->size[0];
  int ydim0 = args[0].dat->size[1];
  int xdim1 = args[1].dat->size[0];
  int ydim1 = args[1].dat->size[1];
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int xdim7 = args[7].dat->size[0];
  int ydim7 = args[7].dat->size[1];
  int xdim8 = args[8].dat->size[0];
  int ydim8 = args[8].dat->size[1];
  int xdim9 = args[9].dat->size[0];
  int ydim9 = args[9].dat->size[1];
  int xdim10 = args[10].dat->size[0];
  int ydim10 = args[10].dat->size[1];
  int xdim11 = args[11].dat->size[0];
  int ydim11 = args[11].dat->size[1];
  int xdim12 = args[12].dat->size[0];
  int ydim12 = args[12].dat->size[1];
  int xdim13 = args[13].dat->size[0];
  int ydim13 = args[13].dat->size[1];
  int xdim14 = args[14].dat->size[0];
  int ydim14 = args[14].dat->size[1];
  int xdim15 = args[15].dat->size[0];
  int ydim15 = args[15].dat->size[1];
  int xdim16 = args[16].dat->size[0];
  int ydim16 = args[16].dat->size[1];
  int xdim17 = args[17].dat->size[0];
  int ydim17 = args[17].dat->size[1];
  int xdim18 = args[18].dat->size[0];
  int ydim18 = args[18].dat->size[1];
  int xdim19 = args[19].dat->size[0];
  int ydim19 = args[19].dat->size[1];
  int xdim20 = args[20].dat->size[0];
  int ydim20 = args[20].dat->size[1];
  int xdim21 = args[21].dat->size[0];
  int ydim21 = args[21].dat->size[1];
  int xdim22 = args[22].dat->size[0];
  int ydim22 = args[22].dat->size[1];
  int xdim23 = args[23].dat->size[0];
  int ydim23 = args[23].dat->size[1];
  int xdim24 = args[24].dat->size[0];
  int ydim24 = args[24].dat->size[1];
  int xdim25 = args[25].dat->size[0];
  int ydim25 = args[25].dat->size[1];
  int xdim26 = args[26].dat->size[0];
  int ydim26 = args[26].dat->size[1];
  int xdim27 = args[27].dat->size[0];
  int ydim27 = args[27].dat->size[1];
  int xdim28 = args[28].dat->size[0];
  int ydim28 = args[28].dat->size[1];
  int xdim29 = args[29].dat->size[0];
  int ydim29 = args[29].dat->size[1];
  int xdim30 = args[30].dat->size[0];
  int ydim30 = args[30].dat->size[1];
  int xdim31 = args[31].dat->size[0];
  int ydim31 = args[31].dat->size[1];
  int xdim32 = args[32].dat->size[0];
  int ydim32 = args[32].dat->size[1];
  int xdim33 = args[33].dat->size[0];
  int ydim33 = args[33].dat->size[1];
  int xdim34 = args[34].dat->size[0];
  int ydim34 = args[34].dat->size[1];
  int xdim35 = args[35].dat->size[0];
  int ydim35 = args[35].dat->size[1];
  int xdim36 = args[36].dat->size[0];
  int ydim36 = args[36].dat->size[1];
  int xdim37 = args[37].dat->size[0];
  int ydim37 = args[37].dat->size[1];
  int xdim38 = args[38].dat->size[0];
  int ydim38 = args[38].dat->size[1];
  int xdim39 = args[39].dat->size[0];
  int ydim39 = args[39].dat->size[1];
  int xdim40 = args[40].dat->size[0];
  int ydim40 = args[40].dat->size[1];
  int xdim41 = args[41].dat->size[0];
  int ydim41 = args[41].dat->size[1];
  int xdim42 = args[42].dat->size[0];
  int ydim42 = args[42].dat->size[1];
  int xdim43 = args[43].dat->size[0];
  int ydim43 = args[43].dat->size[1];
  int xdim44 = args[44].dat->size[0];
  int ydim44 = args[44].dat->size[1];
  int xdim45 = args[45].dat->size[0];
  int ydim45 = args[45].dat->size[1];
  int xdim46 = args[46].dat->size[0];
  int ydim46 = args[46].dat->size[1];
  int xdim47 = args[47].dat->size[0];
  int ydim47 = args[47].dat->size[1];
  int xdim48 = args[48].dat->size[0];
  int ydim48 = args[48].dat->size[1];
  int xdim49 = args[49].dat->size[0];
  int ydim49 = args[49].dat->size[1];
  int xdim50 = args[50].dat->size[0];
  int ydim50 = args[50].dat->size[1];
  int xdim51 = args[51].dat->size[0];
  int ydim51 = args[51].dat->size[1];

  //build opencl kernel if not already built

  buildOpenCLKernels_opensbliblock00Kernel051(block->instance,
  xdim0,ydim0,xdim1,ydim1,xdim2,ydim2,xdim3,ydim3,xdim4,ydim4,xdim5,ydim5,xdim6,ydim6,xdim7,ydim7,xdim8,ydim8,xdim9,ydim9,xdim10,ydim10,xdim11,ydim11,xdim12,ydim12,xdim13,ydim13,xdim14,ydim14,xdim15,ydim15,xdim16,ydim16,xdim17,ydim17,xdim18,ydim18,xdim19,ydim19,xdim20,ydim20,xdim21,ydim21,xdim22,ydim22,xdim23,ydim23,xdim24,ydim24,xdim25,ydim25,xdim26,ydim26,xdim27,ydim27,xdim28,ydim28,xdim29,ydim29,xdim30,ydim30,xdim31,ydim31,xdim32,ydim32,xdim33,ydim33,xdim34,ydim34,xdim35,ydim35,xdim36,ydim36,xdim37,ydim37,xdim38,ydim38,xdim39,ydim39,xdim40,ydim40,xdim41,ydim41,xdim42,ydim42,xdim43,ydim43,xdim44,ydim44,xdim45,ydim45,xdim46,ydim46,xdim47,ydim47,xdim48,ydim48,xdim49,ydim49,xdim50,ydim50,xdim51,ydim51);

  //set up OpenCL thread blocks
  size_t globalWorkSize[3] = {((x_size-1)/block->instance->OPS_block_size_x+ 1)*block->instance->OPS_block_size_x, ((y_size-1)/block->instance->OPS_block_size_y + 1)*block->instance->OPS_block_size_y, ((z_size-1)/block->instance->OPS_block_size_z+ 1)*block->instance->OPS_block_size_z};
  size_t localWorkSize[3] =  {block->instance->OPS_block_size_x,block->instance->OPS_block_size_y,block->instance->OPS_block_size_z};






  //set up initial pointers
  int d_m[OPS_MAX_DIM];
  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d] + OPS_sub_dat_list[args[0].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[0].dat->d_m[d];
  #endif
  int base0 = 1 *1*
  (start[0] * args[0].stencil->stride[0] - args[0].dat->base[0] - d_m[0]);
  base0 = base0 + args[0].dat->size[0] *1*
  (start[1] * args[0].stencil->stride[1] - args[0].dat->base[1] - d_m[1]);
  base0 = base0 + args[0].dat->size[0] *1*  args[0].dat->size[1] *1*
  (start[2] * args[0].stencil->stride[2] - args[0].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d] + OPS_sub_dat_list[args[1].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[1].dat->d_m[d];
  #endif
  int base1 = 1 *1*
  (start[0] * args[1].stencil->stride[0] - args[1].dat->base[0] - d_m[0]);
  base1 = base1 + args[1].dat->size[0] *1*
  (start[1] * args[1].stencil->stride[1] - args[1].dat->base[1] - d_m[1]);
  base1 = base1 + args[1].dat->size[0] *1*  args[1].dat->size[1] *1*
  (start[2] * args[1].stencil->stride[2] - args[1].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d] + OPS_sub_dat_list[args[2].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[2].dat->d_m[d];
  #endif
  int base2 = 1 *1*
  (start[0] * args[2].stencil->stride[0] - args[2].dat->base[0] - d_m[0]);
  base2 = base2 + args[2].dat->size[0] *1*
  (start[1] * args[2].stencil->stride[1] - args[2].dat->base[1] - d_m[1]);
  base2 = base2 + args[2].dat->size[0] *1*  args[2].dat->size[1] *1*
  (start[2] * args[2].stencil->stride[2] - args[2].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d] + OPS_sub_dat_list[args[3].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[3].dat->d_m[d];
  #endif
  int base3 = 1 *1*
  (start[0] * args[3].stencil->stride[0] - args[3].dat->base[0] - d_m[0]);
  base3 = base3 + args[3].dat->size[0] *1*
  (start[1] * args[3].stencil->stride[1] - args[3].dat->base[1] - d_m[1]);
  base3 = base3 + args[3].dat->size[0] *1*  args[3].dat->size[1] *1*
  (start[2] * args[3].stencil->stride[2] - args[3].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[4].dat->d_m[d] + OPS_sub_dat_list[args[4].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[4].dat->d_m[d];
  #endif
  int base4 = 1 *1*
  (start[0] * args[4].stencil->stride[0] - args[4].dat->base[0] - d_m[0]);
  base4 = base4 + args[4].dat->size[0] *1*
  (start[1] * args[4].stencil->stride[1] - args[4].dat->base[1] - d_m[1]);
  base4 = base4 + args[4].dat->size[0] *1*  args[4].dat->size[1] *1*
  (start[2] * args[4].stencil->stride[2] - args[4].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[5].dat->d_m[d] + OPS_sub_dat_list[args[5].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[5].dat->d_m[d];
  #endif
  int base5 = 1 *1*
  (start[0] * args[5].stencil->stride[0] - args[5].dat->base[0] - d_m[0]);
  base5 = base5 + args[5].dat->size[0] *1*
  (start[1] * args[5].stencil->stride[1] - args[5].dat->base[1] - d_m[1]);
  base5 = base5 + args[5].dat->size[0] *1*  args[5].dat->size[1] *1*
  (start[2] * args[5].stencil->stride[2] - args[5].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[6].dat->d_m[d] + OPS_sub_dat_list[args[6].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[6].dat->d_m[d];
  #endif
  int base6 = 1 *1*
  (start[0] * args[6].stencil->stride[0] - args[6].dat->base[0] - d_m[0]);
  base6 = base6 + args[6].dat->size[0] *1*
  (start[1] * args[6].stencil->stride[1] - args[6].dat->base[1] - d_m[1]);
  base6 = base6 + args[6].dat->size[0] *1*  args[6].dat->size[1] *1*
  (start[2] * args[6].stencil->stride[2] - args[6].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[7].dat->d_m[d] + OPS_sub_dat_list[args[7].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[7].dat->d_m[d];
  #endif
  int base7 = 1 *1*
  (start[0] * args[7].stencil->stride[0] - args[7].dat->base[0] - d_m[0]);
  base7 = base7 + args[7].dat->size[0] *1*
  (start[1] * args[7].stencil->stride[1] - args[7].dat->base[1] - d_m[1]);
  base7 = base7 + args[7].dat->size[0] *1*  args[7].dat->size[1] *1*
  (start[2] * args[7].stencil->stride[2] - args[7].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[8].dat->d_m[d] + OPS_sub_dat_list[args[8].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[8].dat->d_m[d];
  #endif
  int base8 = 1 *1*
  (start[0] * args[8].stencil->stride[0] - args[8].dat->base[0] - d_m[0]);
  base8 = base8 + args[8].dat->size[0] *1*
  (start[1] * args[8].stencil->stride[1] - args[8].dat->base[1] - d_m[1]);
  base8 = base8 + args[8].dat->size[0] *1*  args[8].dat->size[1] *1*
  (start[2] * args[8].stencil->stride[2] - args[8].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[9].dat->d_m[d] + OPS_sub_dat_list[args[9].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[9].dat->d_m[d];
  #endif
  int base9 = 1 *1*
  (start[0] * args[9].stencil->stride[0] - args[9].dat->base[0] - d_m[0]);
  base9 = base9 + args[9].dat->size[0] *1*
  (start[1] * args[9].stencil->stride[1] - args[9].dat->base[1] - d_m[1]);
  base9 = base9 + args[9].dat->size[0] *1*  args[9].dat->size[1] *1*
  (start[2] * args[9].stencil->stride[2] - args[9].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[10].dat->d_m[d] + OPS_sub_dat_list[args[10].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[10].dat->d_m[d];
  #endif
  int base10 = 1 *1*
  (start[0] * args[10].stencil->stride[0] - args[10].dat->base[0] - d_m[0]);
  base10 = base10 + args[10].dat->size[0] *1*
  (start[1] * args[10].stencil->stride[1] - args[10].dat->base[1] - d_m[1]);
  base10 = base10 + args[10].dat->size[0] *1*  args[10].dat->size[1] *1*
  (start[2] * args[10].stencil->stride[2] - args[10].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[11].dat->d_m[d] + OPS_sub_dat_list[args[11].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[11].dat->d_m[d];
  #endif
  int base11 = 1 *1*
  (start[0] * args[11].stencil->stride[0] - args[11].dat->base[0] - d_m[0]);
  base11 = base11 + args[11].dat->size[0] *1*
  (start[1] * args[11].stencil->stride[1] - args[11].dat->base[1] - d_m[1]);
  base11 = base11 + args[11].dat->size[0] *1*  args[11].dat->size[1] *1*
  (start[2] * args[11].stencil->stride[2] - args[11].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[12].dat->d_m[d] + OPS_sub_dat_list[args[12].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[12].dat->d_m[d];
  #endif
  int base12 = 1 *1*
  (start[0] * args[12].stencil->stride[0] - args[12].dat->base[0] - d_m[0]);
  base12 = base12 + args[12].dat->size[0] *1*
  (start[1] * args[12].stencil->stride[1] - args[12].dat->base[1] - d_m[1]);
  base12 = base12 + args[12].dat->size[0] *1*  args[12].dat->size[1] *1*
  (start[2] * args[12].stencil->stride[2] - args[12].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[13].dat->d_m[d] + OPS_sub_dat_list[args[13].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[13].dat->d_m[d];
  #endif
  int base13 = 1 *1*
  (start[0] * args[13].stencil->stride[0] - args[13].dat->base[0] - d_m[0]);
  base13 = base13 + args[13].dat->size[0] *1*
  (start[1] * args[13].stencil->stride[1] - args[13].dat->base[1] - d_m[1]);
  base13 = base13 + args[13].dat->size[0] *1*  args[13].dat->size[1] *1*
  (start[2] * args[13].stencil->stride[2] - args[13].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[14].dat->d_m[d] + OPS_sub_dat_list[args[14].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[14].dat->d_m[d];
  #endif
  int base14 = 1 *1*
  (start[0] * args[14].stencil->stride[0] - args[14].dat->base[0] - d_m[0]);
  base14 = base14 + args[14].dat->size[0] *1*
  (start[1] * args[14].stencil->stride[1] - args[14].dat->base[1] - d_m[1]);
  base14 = base14 + args[14].dat->size[0] *1*  args[14].dat->size[1] *1*
  (start[2] * args[14].stencil->stride[2] - args[14].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[15].dat->d_m[d] + OPS_sub_dat_list[args[15].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[15].dat->d_m[d];
  #endif
  int base15 = 1 *1*
  (start[0] * args[15].stencil->stride[0] - args[15].dat->base[0] - d_m[0]);
  base15 = base15 + args[15].dat->size[0] *1*
  (start[1] * args[15].stencil->stride[1] - args[15].dat->base[1] - d_m[1]);
  base15 = base15 + args[15].dat->size[0] *1*  args[15].dat->size[1] *1*
  (start[2] * args[15].stencil->stride[2] - args[15].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[16].dat->d_m[d] + OPS_sub_dat_list[args[16].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[16].dat->d_m[d];
  #endif
  int base16 = 1 *1*
  (start[0] * args[16].stencil->stride[0] - args[16].dat->base[0] - d_m[0]);
  base16 = base16 + args[16].dat->size[0] *1*
  (start[1] * args[16].stencil->stride[1] - args[16].dat->base[1] - d_m[1]);
  base16 = base16 + args[16].dat->size[0] *1*  args[16].dat->size[1] *1*
  (start[2] * args[16].stencil->stride[2] - args[16].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[17].dat->d_m[d] + OPS_sub_dat_list[args[17].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[17].dat->d_m[d];
  #endif
  int base17 = 1 *1*
  (start[0] * args[17].stencil->stride[0] - args[17].dat->base[0] - d_m[0]);
  base17 = base17 + args[17].dat->size[0] *1*
  (start[1] * args[17].stencil->stride[1] - args[17].dat->base[1] - d_m[1]);
  base17 = base17 + args[17].dat->size[0] *1*  args[17].dat->size[1] *1*
  (start[2] * args[17].stencil->stride[2] - args[17].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[18].dat->d_m[d] + OPS_sub_dat_list[args[18].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[18].dat->d_m[d];
  #endif
  int base18 = 1 *1*
  (start[0] * args[18].stencil->stride[0] - args[18].dat->base[0] - d_m[0]);
  base18 = base18 + args[18].dat->size[0] *1*
  (start[1] * args[18].stencil->stride[1] - args[18].dat->base[1] - d_m[1]);
  base18 = base18 + args[18].dat->size[0] *1*  args[18].dat->size[1] *1*
  (start[2] * args[18].stencil->stride[2] - args[18].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[19].dat->d_m[d] + OPS_sub_dat_list[args[19].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[19].dat->d_m[d];
  #endif
  int base19 = 1 *1*
  (start[0] * args[19].stencil->stride[0] - args[19].dat->base[0] - d_m[0]);
  base19 = base19 + args[19].dat->size[0] *1*
  (start[1] * args[19].stencil->stride[1] - args[19].dat->base[1] - d_m[1]);
  base19 = base19 + args[19].dat->size[0] *1*  args[19].dat->size[1] *1*
  (start[2] * args[19].stencil->stride[2] - args[19].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[20].dat->d_m[d] + OPS_sub_dat_list[args[20].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[20].dat->d_m[d];
  #endif
  int base20 = 1 *1*
  (start[0] * args[20].stencil->stride[0] - args[20].dat->base[0] - d_m[0]);
  base20 = base20 + args[20].dat->size[0] *1*
  (start[1] * args[20].stencil->stride[1] - args[20].dat->base[1] - d_m[1]);
  base20 = base20 + args[20].dat->size[0] *1*  args[20].dat->size[1] *1*
  (start[2] * args[20].stencil->stride[2] - args[20].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[21].dat->d_m[d] + OPS_sub_dat_list[args[21].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[21].dat->d_m[d];
  #endif
  int base21 = 1 *1*
  (start[0] * args[21].stencil->stride[0] - args[21].dat->base[0] - d_m[0]);
  base21 = base21 + args[21].dat->size[0] *1*
  (start[1] * args[21].stencil->stride[1] - args[21].dat->base[1] - d_m[1]);
  base21 = base21 + args[21].dat->size[0] *1*  args[21].dat->size[1] *1*
  (start[2] * args[21].stencil->stride[2] - args[21].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[22].dat->d_m[d] + OPS_sub_dat_list[args[22].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[22].dat->d_m[d];
  #endif
  int base22 = 1 *1*
  (start[0] * args[22].stencil->stride[0] - args[22].dat->base[0] - d_m[0]);
  base22 = base22 + args[22].dat->size[0] *1*
  (start[1] * args[22].stencil->stride[1] - args[22].dat->base[1] - d_m[1]);
  base22 = base22 + args[22].dat->size[0] *1*  args[22].dat->size[1] *1*
  (start[2] * args[22].stencil->stride[2] - args[22].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[23].dat->d_m[d] + OPS_sub_dat_list[args[23].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[23].dat->d_m[d];
  #endif
  int base23 = 1 *1*
  (start[0] * args[23].stencil->stride[0] - args[23].dat->base[0] - d_m[0]);
  base23 = base23 + args[23].dat->size[0] *1*
  (start[1] * args[23].stencil->stride[1] - args[23].dat->base[1] - d_m[1]);
  base23 = base23 + args[23].dat->size[0] *1*  args[23].dat->size[1] *1*
  (start[2] * args[23].stencil->stride[2] - args[23].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[24].dat->d_m[d] + OPS_sub_dat_list[args[24].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[24].dat->d_m[d];
  #endif
  int base24 = 1 *1*
  (start[0] * args[24].stencil->stride[0] - args[24].dat->base[0] - d_m[0]);
  base24 = base24 + args[24].dat->size[0] *1*
  (start[1] * args[24].stencil->stride[1] - args[24].dat->base[1] - d_m[1]);
  base24 = base24 + args[24].dat->size[0] *1*  args[24].dat->size[1] *1*
  (start[2] * args[24].stencil->stride[2] - args[24].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[25].dat->d_m[d] + OPS_sub_dat_list[args[25].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[25].dat->d_m[d];
  #endif
  int base25 = 1 *1*
  (start[0] * args[25].stencil->stride[0] - args[25].dat->base[0] - d_m[0]);
  base25 = base25 + args[25].dat->size[0] *1*
  (start[1] * args[25].stencil->stride[1] - args[25].dat->base[1] - d_m[1]);
  base25 = base25 + args[25].dat->size[0] *1*  args[25].dat->size[1] *1*
  (start[2] * args[25].stencil->stride[2] - args[25].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[26].dat->d_m[d] + OPS_sub_dat_list[args[26].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[26].dat->d_m[d];
  #endif
  int base26 = 1 *1*
  (start[0] * args[26].stencil->stride[0] - args[26].dat->base[0] - d_m[0]);
  base26 = base26 + args[26].dat->size[0] *1*
  (start[1] * args[26].stencil->stride[1] - args[26].dat->base[1] - d_m[1]);
  base26 = base26 + args[26].dat->size[0] *1*  args[26].dat->size[1] *1*
  (start[2] * args[26].stencil->stride[2] - args[26].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[27].dat->d_m[d] + OPS_sub_dat_list[args[27].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[27].dat->d_m[d];
  #endif
  int base27 = 1 *1*
  (start[0] * args[27].stencil->stride[0] - args[27].dat->base[0] - d_m[0]);
  base27 = base27 + args[27].dat->size[0] *1*
  (start[1] * args[27].stencil->stride[1] - args[27].dat->base[1] - d_m[1]);
  base27 = base27 + args[27].dat->size[0] *1*  args[27].dat->size[1] *1*
  (start[2] * args[27].stencil->stride[2] - args[27].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[28].dat->d_m[d] + OPS_sub_dat_list[args[28].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[28].dat->d_m[d];
  #endif
  int base28 = 1 *1*
  (start[0] * args[28].stencil->stride[0] - args[28].dat->base[0] - d_m[0]);
  base28 = base28 + args[28].dat->size[0] *1*
  (start[1] * args[28].stencil->stride[1] - args[28].dat->base[1] - d_m[1]);
  base28 = base28 + args[28].dat->size[0] *1*  args[28].dat->size[1] *1*
  (start[2] * args[28].stencil->stride[2] - args[28].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[29].dat->d_m[d] + OPS_sub_dat_list[args[29].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[29].dat->d_m[d];
  #endif
  int base29 = 1 *1*
  (start[0] * args[29].stencil->stride[0] - args[29].dat->base[0] - d_m[0]);
  base29 = base29 + args[29].dat->size[0] *1*
  (start[1] * args[29].stencil->stride[1] - args[29].dat->base[1] - d_m[1]);
  base29 = base29 + args[29].dat->size[0] *1*  args[29].dat->size[1] *1*
  (start[2] * args[29].stencil->stride[2] - args[29].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[30].dat->d_m[d] + OPS_sub_dat_list[args[30].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[30].dat->d_m[d];
  #endif
  int base30 = 1 *1*
  (start[0] * args[30].stencil->stride[0] - args[30].dat->base[0] - d_m[0]);
  base30 = base30 + args[30].dat->size[0] *1*
  (start[1] * args[30].stencil->stride[1] - args[30].dat->base[1] - d_m[1]);
  base30 = base30 + args[30].dat->size[0] *1*  args[30].dat->size[1] *1*
  (start[2] * args[30].stencil->stride[2] - args[30].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[31].dat->d_m[d] + OPS_sub_dat_list[args[31].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[31].dat->d_m[d];
  #endif
  int base31 = 1 *1*
  (start[0] * args[31].stencil->stride[0] - args[31].dat->base[0] - d_m[0]);
  base31 = base31 + args[31].dat->size[0] *1*
  (start[1] * args[31].stencil->stride[1] - args[31].dat->base[1] - d_m[1]);
  base31 = base31 + args[31].dat->size[0] *1*  args[31].dat->size[1] *1*
  (start[2] * args[31].stencil->stride[2] - args[31].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[32].dat->d_m[d] + OPS_sub_dat_list[args[32].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[32].dat->d_m[d];
  #endif
  int base32 = 1 *1*
  (start[0] * args[32].stencil->stride[0] - args[32].dat->base[0] - d_m[0]);
  base32 = base32 + args[32].dat->size[0] *1*
  (start[1] * args[32].stencil->stride[1] - args[32].dat->base[1] - d_m[1]);
  base32 = base32 + args[32].dat->size[0] *1*  args[32].dat->size[1] *1*
  (start[2] * args[32].stencil->stride[2] - args[32].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[33].dat->d_m[d] + OPS_sub_dat_list[args[33].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[33].dat->d_m[d];
  #endif
  int base33 = 1 *1*
  (start[0] * args[33].stencil->stride[0] - args[33].dat->base[0] - d_m[0]);
  base33 = base33 + args[33].dat->size[0] *1*
  (start[1] * args[33].stencil->stride[1] - args[33].dat->base[1] - d_m[1]);
  base33 = base33 + args[33].dat->size[0] *1*  args[33].dat->size[1] *1*
  (start[2] * args[33].stencil->stride[2] - args[33].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[34].dat->d_m[d] + OPS_sub_dat_list[args[34].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[34].dat->d_m[d];
  #endif
  int base34 = 1 *1*
  (start[0] * args[34].stencil->stride[0] - args[34].dat->base[0] - d_m[0]);
  base34 = base34 + args[34].dat->size[0] *1*
  (start[1] * args[34].stencil->stride[1] - args[34].dat->base[1] - d_m[1]);
  base34 = base34 + args[34].dat->size[0] *1*  args[34].dat->size[1] *1*
  (start[2] * args[34].stencil->stride[2] - args[34].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[35].dat->d_m[d] + OPS_sub_dat_list[args[35].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[35].dat->d_m[d];
  #endif
  int base35 = 1 *1*
  (start[0] * args[35].stencil->stride[0] - args[35].dat->base[0] - d_m[0]);
  base35 = base35 + args[35].dat->size[0] *1*
  (start[1] * args[35].stencil->stride[1] - args[35].dat->base[1] - d_m[1]);
  base35 = base35 + args[35].dat->size[0] *1*  args[35].dat->size[1] *1*
  (start[2] * args[35].stencil->stride[2] - args[35].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[36].dat->d_m[d] + OPS_sub_dat_list[args[36].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[36].dat->d_m[d];
  #endif
  int base36 = 1 *1*
  (start[0] * args[36].stencil->stride[0] - args[36].dat->base[0] - d_m[0]);
  base36 = base36 + args[36].dat->size[0] *1*
  (start[1] * args[36].stencil->stride[1] - args[36].dat->base[1] - d_m[1]);
  base36 = base36 + args[36].dat->size[0] *1*  args[36].dat->size[1] *1*
  (start[2] * args[36].stencil->stride[2] - args[36].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[37].dat->d_m[d] + OPS_sub_dat_list[args[37].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[37].dat->d_m[d];
  #endif
  int base37 = 1 *1*
  (start[0] * args[37].stencil->stride[0] - args[37].dat->base[0] - d_m[0]);
  base37 = base37 + args[37].dat->size[0] *1*
  (start[1] * args[37].stencil->stride[1] - args[37].dat->base[1] - d_m[1]);
  base37 = base37 + args[37].dat->size[0] *1*  args[37].dat->size[1] *1*
  (start[2] * args[37].stencil->stride[2] - args[37].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[38].dat->d_m[d] + OPS_sub_dat_list[args[38].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[38].dat->d_m[d];
  #endif
  int base38 = 1 *1*
  (start[0] * args[38].stencil->stride[0] - args[38].dat->base[0] - d_m[0]);
  base38 = base38 + args[38].dat->size[0] *1*
  (start[1] * args[38].stencil->stride[1] - args[38].dat->base[1] - d_m[1]);
  base38 = base38 + args[38].dat->size[0] *1*  args[38].dat->size[1] *1*
  (start[2] * args[38].stencil->stride[2] - args[38].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[39].dat->d_m[d] + OPS_sub_dat_list[args[39].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[39].dat->d_m[d];
  #endif
  int base39 = 1 *1*
  (start[0] * args[39].stencil->stride[0] - args[39].dat->base[0] - d_m[0]);
  base39 = base39 + args[39].dat->size[0] *1*
  (start[1] * args[39].stencil->stride[1] - args[39].dat->base[1] - d_m[1]);
  base39 = base39 + args[39].dat->size[0] *1*  args[39].dat->size[1] *1*
  (start[2] * args[39].stencil->stride[2] - args[39].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[40].dat->d_m[d] + OPS_sub_dat_list[args[40].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[40].dat->d_m[d];
  #endif
  int base40 = 1 *1*
  (start[0] * args[40].stencil->stride[0] - args[40].dat->base[0] - d_m[0]);
  base40 = base40 + args[40].dat->size[0] *1*
  (start[1] * args[40].stencil->stride[1] - args[40].dat->base[1] - d_m[1]);
  base40 = base40 + args[40].dat->size[0] *1*  args[40].dat->size[1] *1*
  (start[2] * args[40].stencil->stride[2] - args[40].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[41].dat->d_m[d] + OPS_sub_dat_list[args[41].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[41].dat->d_m[d];
  #endif
  int base41 = 1 *1*
  (start[0] * args[41].stencil->stride[0] - args[41].dat->base[0] - d_m[0]);
  base41 = base41 + args[41].dat->size[0] *1*
  (start[1] * args[41].stencil->stride[1] - args[41].dat->base[1] - d_m[1]);
  base41 = base41 + args[41].dat->size[0] *1*  args[41].dat->size[1] *1*
  (start[2] * args[41].stencil->stride[2] - args[41].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[42].dat->d_m[d] + OPS_sub_dat_list[args[42].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[42].dat->d_m[d];
  #endif
  int base42 = 1 *1*
  (start[0] * args[42].stencil->stride[0] - args[42].dat->base[0] - d_m[0]);
  base42 = base42 + args[42].dat->size[0] *1*
  (start[1] * args[42].stencil->stride[1] - args[42].dat->base[1] - d_m[1]);
  base42 = base42 + args[42].dat->size[0] *1*  args[42].dat->size[1] *1*
  (start[2] * args[42].stencil->stride[2] - args[42].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[43].dat->d_m[d] + OPS_sub_dat_list[args[43].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[43].dat->d_m[d];
  #endif
  int base43 = 1 *1*
  (start[0] * args[43].stencil->stride[0] - args[43].dat->base[0] - d_m[0]);
  base43 = base43 + args[43].dat->size[0] *1*
  (start[1] * args[43].stencil->stride[1] - args[43].dat->base[1] - d_m[1]);
  base43 = base43 + args[43].dat->size[0] *1*  args[43].dat->size[1] *1*
  (start[2] * args[43].stencil->stride[2] - args[43].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[44].dat->d_m[d] + OPS_sub_dat_list[args[44].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[44].dat->d_m[d];
  #endif
  int base44 = 1 *1*
  (start[0] * args[44].stencil->stride[0] - args[44].dat->base[0] - d_m[0]);
  base44 = base44 + args[44].dat->size[0] *1*
  (start[1] * args[44].stencil->stride[1] - args[44].dat->base[1] - d_m[1]);
  base44 = base44 + args[44].dat->size[0] *1*  args[44].dat->size[1] *1*
  (start[2] * args[44].stencil->stride[2] - args[44].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[45].dat->d_m[d] + OPS_sub_dat_list[args[45].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[45].dat->d_m[d];
  #endif
  int base45 = 1 *1*
  (start[0] * args[45].stencil->stride[0] - args[45].dat->base[0] - d_m[0]);
  base45 = base45 + args[45].dat->size[0] *1*
  (start[1] * args[45].stencil->stride[1] - args[45].dat->base[1] - d_m[1]);
  base45 = base45 + args[45].dat->size[0] *1*  args[45].dat->size[1] *1*
  (start[2] * args[45].stencil->stride[2] - args[45].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[46].dat->d_m[d] + OPS_sub_dat_list[args[46].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[46].dat->d_m[d];
  #endif
  int base46 = 1 *1*
  (start[0] * args[46].stencil->stride[0] - args[46].dat->base[0] - d_m[0]);
  base46 = base46 + args[46].dat->size[0] *1*
  (start[1] * args[46].stencil->stride[1] - args[46].dat->base[1] - d_m[1]);
  base46 = base46 + args[46].dat->size[0] *1*  args[46].dat->size[1] *1*
  (start[2] * args[46].stencil->stride[2] - args[46].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[47].dat->d_m[d] + OPS_sub_dat_list[args[47].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[47].dat->d_m[d];
  #endif
  int base47 = 1 *1*
  (start[0] * args[47].stencil->stride[0] - args[47].dat->base[0] - d_m[0]);
  base47 = base47 + args[47].dat->size[0] *1*
  (start[1] * args[47].stencil->stride[1] - args[47].dat->base[1] - d_m[1]);
  base47 = base47 + args[47].dat->size[0] *1*  args[47].dat->size[1] *1*
  (start[2] * args[47].stencil->stride[2] - args[47].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[48].dat->d_m[d] + OPS_sub_dat_list[args[48].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[48].dat->d_m[d];
  #endif
  int base48 = 1 *1*
  (start[0] * args[48].stencil->stride[0] - args[48].dat->base[0] - d_m[0]);
  base48 = base48 + args[48].dat->size[0] *1*
  (start[1] * args[48].stencil->stride[1] - args[48].dat->base[1] - d_m[1]);
  base48 = base48 + args[48].dat->size[0] *1*  args[48].dat->size[1] *1*
  (start[2] * args[48].stencil->stride[2] - args[48].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[49].dat->d_m[d] + OPS_sub_dat_list[args[49].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[49].dat->d_m[d];
  #endif
  int base49 = 1 *1*
  (start[0] * args[49].stencil->stride[0] - args[49].dat->base[0] - d_m[0]);
  base49 = base49 + args[49].dat->size[0] *1*
  (start[1] * args[49].stencil->stride[1] - args[49].dat->base[1] - d_m[1]);
  base49 = base49 + args[49].dat->size[0] *1*  args[49].dat->size[1] *1*
  (start[2] * args[49].stencil->stride[2] - args[49].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[50].dat->d_m[d] + OPS_sub_dat_list[args[50].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[50].dat->d_m[d];
  #endif
  int base50 = 1 *1*
  (start[0] * args[50].stencil->stride[0] - args[50].dat->base[0] - d_m[0]);
  base50 = base50 + args[50].dat->size[0] *1*
  (start[1] * args[50].stencil->stride[1] - args[50].dat->base[1] - d_m[1]);
  base50 = base50 + args[50].dat->size[0] *1*  args[50].dat->size[1] *1*
  (start[2] * args[50].stencil->stride[2] - args[50].dat->base[2] - d_m[2]);

  #ifdef OPS_MPI
  for (int d = 0; d < dim; d++) d_m[d] = args[51].dat->d_m[d] + OPS_sub_dat_list[args[51].dat->index]->d_im[d];
  #else
  for (int d = 0; d < dim; d++) d_m[d] = args[51].dat->d_m[d];
  #endif
  int base51 = 1 *1*
  (start[0] * args[51].stencil->stride[0] - args[51].dat->base[0] - d_m[0]);
  base51 = base51 + args[51].dat->size[0] *1*
  (start[1] * args[51].stencil->stride[1] - args[51].dat->base[1] - d_m[1]);
  base51 = base51 + args[51].dat->size[0] *1*  args[51].dat->size[1] *1*
  (start[2] * args[51].stencil->stride[2] - args[51].dat->base[2] - d_m[2]);


  ops_H_D_exchanges_device(args, 52);
  ops_halo_exchanges(args,52,range);
  ops_H_D_exchanges_device(args, 52);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[55].mpi_time += t2-t1;
  }

  if (globalWorkSize[0]>0 && globalWorkSize[1]>0 && globalWorkSize[2]>0) {

    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 0, sizeof(cl_mem), (void*) &arg0.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 1, sizeof(cl_mem), (void*) &arg1.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 2, sizeof(cl_mem), (void*) &arg2.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 3, sizeof(cl_mem), (void*) &arg3.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 4, sizeof(cl_mem), (void*) &arg4.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 5, sizeof(cl_mem), (void*) &arg5.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 6, sizeof(cl_mem), (void*) &arg6.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 7, sizeof(cl_mem), (void*) &arg7.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 8, sizeof(cl_mem), (void*) &arg8.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 9, sizeof(cl_mem), (void*) &arg9.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 10, sizeof(cl_mem), (void*) &arg10.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 11, sizeof(cl_mem), (void*) &arg11.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 12, sizeof(cl_mem), (void*) &arg12.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 13, sizeof(cl_mem), (void*) &arg13.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 14, sizeof(cl_mem), (void*) &arg14.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 15, sizeof(cl_mem), (void*) &arg15.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 16, sizeof(cl_mem), (void*) &arg16.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 17, sizeof(cl_mem), (void*) &arg17.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 18, sizeof(cl_mem), (void*) &arg18.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 19, sizeof(cl_mem), (void*) &arg19.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 20, sizeof(cl_mem), (void*) &arg20.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 21, sizeof(cl_mem), (void*) &arg21.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 22, sizeof(cl_mem), (void*) &arg22.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 23, sizeof(cl_mem), (void*) &arg23.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 24, sizeof(cl_mem), (void*) &arg24.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 25, sizeof(cl_mem), (void*) &arg25.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 26, sizeof(cl_mem), (void*) &arg26.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 27, sizeof(cl_mem), (void*) &arg27.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 28, sizeof(cl_mem), (void*) &arg28.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 29, sizeof(cl_mem), (void*) &arg29.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 30, sizeof(cl_mem), (void*) &arg30.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 31, sizeof(cl_mem), (void*) &arg31.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 32, sizeof(cl_mem), (void*) &arg32.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 33, sizeof(cl_mem), (void*) &arg33.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 34, sizeof(cl_mem), (void*) &arg34.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 35, sizeof(cl_mem), (void*) &arg35.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 36, sizeof(cl_mem), (void*) &arg36.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 37, sizeof(cl_mem), (void*) &arg37.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 38, sizeof(cl_mem), (void*) &arg38.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 39, sizeof(cl_mem), (void*) &arg39.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 40, sizeof(cl_mem), (void*) &arg40.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 41, sizeof(cl_mem), (void*) &arg41.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 42, sizeof(cl_mem), (void*) &arg42.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 43, sizeof(cl_mem), (void*) &arg43.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 44, sizeof(cl_mem), (void*) &arg44.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 45, sizeof(cl_mem), (void*) &arg45.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 46, sizeof(cl_mem), (void*) &arg46.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 47, sizeof(cl_mem), (void*) &arg47.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 48, sizeof(cl_mem), (void*) &arg48.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 49, sizeof(cl_mem), (void*) &arg49.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 50, sizeof(cl_mem), (void*) &arg50.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 51, sizeof(cl_mem), (void*) &arg51.data_d ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 52, sizeof(cl_double), (void*) &rc6 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 53, sizeof(cl_int), (void*) &base0 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 54, sizeof(cl_int), (void*) &base1 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 55, sizeof(cl_int), (void*) &base2 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 56, sizeof(cl_int), (void*) &base3 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 57, sizeof(cl_int), (void*) &base4 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 58, sizeof(cl_int), (void*) &base5 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 59, sizeof(cl_int), (void*) &base6 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 60, sizeof(cl_int), (void*) &base7 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 61, sizeof(cl_int), (void*) &base8 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 62, sizeof(cl_int), (void*) &base9 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 63, sizeof(cl_int), (void*) &base10 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 64, sizeof(cl_int), (void*) &base11 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 65, sizeof(cl_int), (void*) &base12 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 66, sizeof(cl_int), (void*) &base13 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 67, sizeof(cl_int), (void*) &base14 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 68, sizeof(cl_int), (void*) &base15 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 69, sizeof(cl_int), (void*) &base16 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 70, sizeof(cl_int), (void*) &base17 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 71, sizeof(cl_int), (void*) &base18 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 72, sizeof(cl_int), (void*) &base19 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 73, sizeof(cl_int), (void*) &base20 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 74, sizeof(cl_int), (void*) &base21 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 75, sizeof(cl_int), (void*) &base22 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 76, sizeof(cl_int), (void*) &base23 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 77, sizeof(cl_int), (void*) &base24 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 78, sizeof(cl_int), (void*) &base25 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 79, sizeof(cl_int), (void*) &base26 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 80, sizeof(cl_int), (void*) &base27 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 81, sizeof(cl_int), (void*) &base28 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 82, sizeof(cl_int), (void*) &base29 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 83, sizeof(cl_int), (void*) &base30 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 84, sizeof(cl_int), (void*) &base31 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 85, sizeof(cl_int), (void*) &base32 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 86, sizeof(cl_int), (void*) &base33 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 87, sizeof(cl_int), (void*) &base34 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 88, sizeof(cl_int), (void*) &base35 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 89, sizeof(cl_int), (void*) &base36 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 90, sizeof(cl_int), (void*) &base37 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 91, sizeof(cl_int), (void*) &base38 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 92, sizeof(cl_int), (void*) &base39 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 93, sizeof(cl_int), (void*) &base40 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 94, sizeof(cl_int), (void*) &base41 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 95, sizeof(cl_int), (void*) &base42 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 96, sizeof(cl_int), (void*) &base43 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 97, sizeof(cl_int), (void*) &base44 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 98, sizeof(cl_int), (void*) &base45 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 99, sizeof(cl_int), (void*) &base46 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 100, sizeof(cl_int), (void*) &base47 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 101, sizeof(cl_int), (void*) &base48 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 102, sizeof(cl_int), (void*) &base49 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 103, sizeof(cl_int), (void*) &base50 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 104, sizeof(cl_int), (void*) &base51 ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 105, sizeof(cl_int), (void*) &x_size ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 106, sizeof(cl_int), (void*) &y_size ));
    clSafeCall( clSetKernelArg(block->instance->opencl_instance->OPS_opencl_core.kernel[55], 107, sizeof(cl_int), (void*) &z_size ));

    //call/enqueue opencl kernel wrapper function
    clSafeCall( clEnqueueNDRangeKernel(block->instance->opencl_instance->OPS_opencl_core.command_queue, block->instance->opencl_instance->OPS_opencl_core.kernel[55], 3, NULL, globalWorkSize, localWorkSize, 0, NULL, NULL) );
  }
  if (block->instance->OPS_diags>1) {
    clSafeCall( clFinish(block->instance->opencl_instance->OPS_opencl_core.command_queue) );
  }

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[55].time += t1-t2;
  }

  ops_set_dirtybit_device(args, 52);
  ops_set_halo_dirtybit3(&args[47],range);
  ops_set_halo_dirtybit3(&args[48],range);
  ops_set_halo_dirtybit3(&args[49],range);
  ops_set_halo_dirtybit3(&args[50],range);
  ops_set_halo_dirtybit3(&args[51],range);

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[55].mpi_time += t2-t1;
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg0);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg1);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg6);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg7);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg8);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg9);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg10);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg11);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg12);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg13);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg14);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg15);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg16);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg17);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg18);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg19);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg20);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg21);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg22);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg23);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg24);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg25);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg26);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg27);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg28);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg29);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg30);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg31);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg32);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg33);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg34);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg35);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg36);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg37);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg38);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg39);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg40);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg41);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg42);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg43);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg44);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg45);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg46);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg47);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg48);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg49);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg50);
    block->instance->OPS_kernels[55].transfer += ops_compute_transfer(dim, start, end, &arg51);
  }
}

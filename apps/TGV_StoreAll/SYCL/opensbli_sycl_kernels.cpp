//
// auto-generated by ops.py
//
//header
#define OPS_3D
#define OPS_API 2
#include "ops_lib_core.h"
#ifdef OPS_MPI
#include "ops_mpi_core.h"
#include <limits>
#endif

#include "ops_sycl_rt_support.h"
#include "ops_sycl_reduction.h"
// global constants
cl::sycl::buffer<int,1> *block0np0_p=nullptr;
extern int block0np0;
cl::sycl::buffer<int,1> *block0np1_p=nullptr;
extern int block0np1;
cl::sycl::buffer<int,1> *block0np2_p=nullptr;
extern int block0np2;
cl::sycl::buffer<double,1> *Delta0block0_p=nullptr;
extern double Delta0block0;
cl::sycl::buffer<double,1> *Delta1block0_p=nullptr;
extern double Delta1block0;
cl::sycl::buffer<double,1> *Delta2block0_p=nullptr;
extern double Delta2block0;
cl::sycl::buffer<int,1> *niter_p=nullptr;
extern int niter;
cl::sycl::buffer<double,1> *dt_p=nullptr;
extern double dt;
cl::sycl::buffer<double,1> *gama_p=nullptr;
extern double gama;
cl::sycl::buffer<double,1> *Minf_p=nullptr;
extern double Minf;
cl::sycl::buffer<double,1> *Re_p=nullptr;
extern double Re;
cl::sycl::buffer<double,1> *Pr_p=nullptr;
extern double Pr;
cl::sycl::buffer<double,1> *inv_0_p=nullptr;
extern double inv_0;
cl::sycl::buffer<double,1> *inv_1_p=nullptr;
extern double inv_1;
cl::sycl::buffer<double,1> *inv_2_p=nullptr;
extern double inv_2;
cl::sycl::buffer<double,1> *inv_3_p=nullptr;
extern double inv_3;
cl::sycl::buffer<double,1> *inv_4_p=nullptr;
extern double inv_4;
cl::sycl::buffer<double,1> *inv_5_p=nullptr;
extern double inv_5;
cl::sycl::buffer<double,1> *rc6_p=nullptr;
extern double rc6;
cl::sycl::buffer<double,1> *rc7_p=nullptr;
extern double rc7;
cl::sycl::buffer<double,1> *rc8_p=nullptr;
extern double rc8;
cl::sycl::buffer<double,1> *rcinv9_p=nullptr;
extern double rcinv9;
cl::sycl::buffer<double,1> *rc10_p=nullptr;
extern double rc10;
cl::sycl::buffer<double,1> *rc11_p=nullptr;
extern double rc11;
cl::sycl::buffer<double,1> *rcinv12_p=nullptr;
extern double rcinv12;
cl::sycl::buffer<double,1> *rcinv13_p=nullptr;
extern double rcinv13;
cl::sycl::buffer<double,1> *rcinv14_p=nullptr;
extern double rcinv14;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const * type, int size, char * dat, char const * name ) {
  if (!strcmp(name,"block0np0")) {
    if (block0np0_p == nullptr) block0np0_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*block0np0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"block0np1")) {
    if (block0np1_p == nullptr) block0np1_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*block0np1_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"block0np2")) {
    if (block0np2_p == nullptr) block0np2_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*block0np2_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Delta0block0")) {
    if (Delta0block0_p == nullptr) Delta0block0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Delta0block0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Delta1block0")) {
    if (Delta1block0_p == nullptr) Delta1block0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Delta1block0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Delta2block0")) {
    if (Delta2block0_p == nullptr) Delta2block0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Delta2block0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"niter")) {
    if (niter_p == nullptr) niter_p = new cl::sycl::buffer<int,1>(cl::sycl::range<1>(dim));
    auto accessor = (*niter_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((int*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"dt")) {
    if (dt_p == nullptr) dt_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*dt_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"gama")) {
    if (gama_p == nullptr) gama_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*gama_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Minf")) {
    if (Minf_p == nullptr) Minf_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Minf_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Re")) {
    if (Re_p == nullptr) Re_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Re_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"Pr")) {
    if (Pr_p == nullptr) Pr_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*Pr_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv_0")) {
    if (inv_0_p == nullptr) inv_0_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv_0_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv_1")) {
    if (inv_1_p == nullptr) inv_1_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv_1_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv_2")) {
    if (inv_2_p == nullptr) inv_2_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv_2_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv_3")) {
    if (inv_3_p == nullptr) inv_3_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv_3_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv_4")) {
    if (inv_4_p == nullptr) inv_4_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv_4_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"inv_5")) {
    if (inv_5_p == nullptr) inv_5_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*inv_5_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc6")) {
    if (rc6_p == nullptr) rc6_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc6_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc7")) {
    if (rc7_p == nullptr) rc7_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc7_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc8")) {
    if (rc8_p == nullptr) rc8_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc8_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rcinv9")) {
    if (rcinv9_p == nullptr) rcinv9_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rcinv9_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc10")) {
    if (rc10_p == nullptr) rc10_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc10_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rc11")) {
    if (rc11_p == nullptr) rc11_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rc11_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rcinv12")) {
    if (rcinv12_p == nullptr) rcinv12_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rcinv12_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rcinv13")) {
    if (rcinv13_p == nullptr) rcinv13_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rcinv13_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  if (!strcmp(name,"rcinv14")) {
    if (rcinv14_p == nullptr) rcinv14_p = new cl::sycl::buffer<double,1>(cl::sycl::range<1>(dim));
    auto accessor = (*rcinv14_p).get_access<cl::sycl::access::mode::write>();
    for ( int d=0; d<dim; d++ ){
      accessor[d] = ((double*)dat)[d];
    }
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}

//user kernel files
#include "opensbliblock00Kernel087_sycl_kernel.cpp"
#include "opensbliblock00Kernel081_sycl_kernel.cpp"
#include "opensbliblock00Kernel082_sycl_kernel.cpp"
#include "opensbliblock00Kernel083_sycl_kernel.cpp"
#include "opensbliblock00Kernel084_sycl_kernel.cpp"
#include "opensbliblock00Kernel085_sycl_kernel.cpp"
#include "opensbliblock00Kernel086_sycl_kernel.cpp"
#include "opensbliblock00Kernel088_sycl_kernel.cpp"
#include "opensbliblock00Kernel003_sycl_kernel.cpp"
#include "opensbliblock00Kernel024_sycl_kernel.cpp"
#include "opensbliblock00Kernel038_sycl_kernel.cpp"
#include "opensbliblock00Kernel009_sycl_kernel.cpp"
#include "opensbliblock00Kernel079_sycl_kernel.cpp"
#include "opensbliblock00Kernel000_sycl_kernel.cpp"
#include "opensbliblock00Kernel002_sycl_kernel.cpp"
#include "opensbliblock00Kernel004_sycl_kernel.cpp"
#include "opensbliblock00Kernel006_sycl_kernel.cpp"
#include "opensbliblock00Kernel008_sycl_kernel.cpp"
#include "opensbliblock00Kernel010_sycl_kernel.cpp"
#include "opensbliblock00Kernel011_sycl_kernel.cpp"
#include "opensbliblock00Kernel012_sycl_kernel.cpp"
#include "opensbliblock00Kernel014_sycl_kernel.cpp"
#include "opensbliblock00Kernel015_sycl_kernel.cpp"
#include "opensbliblock00Kernel016_sycl_kernel.cpp"
#include "opensbliblock00Kernel018_sycl_kernel.cpp"
#include "opensbliblock00Kernel019_sycl_kernel.cpp"
#include "opensbliblock00Kernel020_sycl_kernel.cpp"
#include "opensbliblock00Kernel021_sycl_kernel.cpp"
#include "opensbliblock00Kernel022_sycl_kernel.cpp"
#include "opensbliblock00Kernel023_sycl_kernel.cpp"
#include "opensbliblock00Kernel025_sycl_kernel.cpp"
#include "opensbliblock00Kernel026_sycl_kernel.cpp"
#include "opensbliblock00Kernel027_sycl_kernel.cpp"
#include "opensbliblock00Kernel028_sycl_kernel.cpp"
#include "opensbliblock00Kernel029_sycl_kernel.cpp"
#include "opensbliblock00Kernel030_sycl_kernel.cpp"
#include "opensbliblock00Kernel031_sycl_kernel.cpp"
#include "opensbliblock00Kernel032_sycl_kernel.cpp"
#include "opensbliblock00Kernel033_sycl_kernel.cpp"
#include "opensbliblock00Kernel034_sycl_kernel.cpp"
#include "opensbliblock00Kernel035_sycl_kernel.cpp"
#include "opensbliblock00Kernel036_sycl_kernel.cpp"
#include "opensbliblock00Kernel037_sycl_kernel.cpp"
#include "opensbliblock00Kernel039_sycl_kernel.cpp"
#include "opensbliblock00Kernel040_sycl_kernel.cpp"
#include "opensbliblock00Kernel041_sycl_kernel.cpp"
#include "opensbliblock00Kernel042_sycl_kernel.cpp"
#include "opensbliblock00Kernel043_sycl_kernel.cpp"
#include "opensbliblock00Kernel044_sycl_kernel.cpp"
#include "opensbliblock00Kernel045_sycl_kernel.cpp"
#include "opensbliblock00Kernel046_sycl_kernel.cpp"
#include "opensbliblock00Kernel047_sycl_kernel.cpp"
#include "opensbliblock00Kernel048_sycl_kernel.cpp"
#include "opensbliblock00Kernel049_sycl_kernel.cpp"
#include "opensbliblock00Kernel050_sycl_kernel.cpp"
#include "opensbliblock00Kernel051_sycl_kernel.cpp"
#include "opensbliblock00Kernel052_sycl_kernel.cpp"
#include "opensbliblock00Kernel053_sycl_kernel.cpp"
#include "opensbliblock00Kernel055_sycl_kernel.cpp"
#include "opensbliblock00Kernel056_sycl_kernel.cpp"
#include "opensbliblock00Kernel057_sycl_kernel.cpp"
#include "opensbliblock00Kernel058_sycl_kernel.cpp"
#include "opensbliblock00Kernel059_sycl_kernel.cpp"
#include "opensbliblock00Kernel060_sycl_kernel.cpp"
#include "opensbliblock00Kernel061_sycl_kernel.cpp"
#include "opensbliblock00Kernel062_sycl_kernel.cpp"
#include "opensbliblock00Kernel063_sycl_kernel.cpp"
#include "opensbliblock00Kernel065_sycl_kernel.cpp"
#include "opensbliblock00Kernel066_sycl_kernel.cpp"
#include "opensbliblock00Kernel067_sycl_kernel.cpp"
#include "opensbliblock00Kernel068_sycl_kernel.cpp"
#include "opensbliblock00Kernel070_sycl_kernel.cpp"
#include "opensbliblock00Kernel073_sycl_kernel.cpp"
#include "opensbliblock00Kernel074_sycl_kernel.cpp"
#include "opensbliblock00Kernel076_sycl_kernel.cpp"
#include "opensbliblock00Kernel077_sycl_kernel.cpp"
#include "opensbliblock00Kernel078_sycl_kernel.cpp"
#include "opensbliblock00Kernel054_sycl_kernel.cpp"
#include "opensbliblock00Kernel064_sycl_kernel.cpp"
#include "opensbliblock00Kernel069_sycl_kernel.cpp"
#include "opensbliblock00Kernel071_sycl_kernel.cpp"
#include "opensbliblock00Kernel072_sycl_kernel.cpp"
#include "opensbliblock00Kernel075_sycl_kernel.cpp"
#include "opensbliblock00Kernel080_sycl_kernel.cpp"
#include "opensbliblock00Kernel090_sycl_kernel.cpp"
#include "opensbliblock00Kernel089_sycl_kernel.cpp"

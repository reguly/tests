Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] opensbli_ops.cpp(240,1)
  -> defdec_data_set.h:(8,8) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(17,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(26,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(35,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(44,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(53,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(62,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(71,16) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(80,11) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(89,17) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(98,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(107,18) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(116,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(125,18) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(134,12) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(143,18) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(152,8) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(161,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(170,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(179,9) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(188,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(197,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(206,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(215,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(224,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(233,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> defdec_data_set.h:(242,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> INLINE: defdec_data_set.h:(251,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> INLINE: defdec_data_set.h:(260,10) ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)
  -> INLINE: (242,15) atoi(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (243,15) atoi(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (244,15) atoi(const char *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (259,11) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (260,11) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (261,11) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (268,13) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> (274,3) ops_decl_const<int>(const char *, int, const char *, int *)
  -> (275,3) ops_decl_const<int>(const char *, int, const char *, int *)
  -> (276,3) ops_decl_const<int>(const char *, int, const char *, int *)
  -> (277,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (278,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (279,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (280,3) ops_decl_const<int>(const char *, int, const char *, int *)
  -> (281,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (282,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (283,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (284,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (285,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (286,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (287,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (288,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (289,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (290,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (291,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (292,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (293,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (294,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (295,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (296,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (297,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (298,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (299,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> (300,3) ops_decl_const<double>(const char *, int, const char *, double *)
  -> INLINE: (541,60) ops_arg_gbl<double>(double *, int, const char *, ops_access)
  -> INLINE: (555,60) ops_arg_gbl<double>(double *, int, const char *, ops_access)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/reguly/OPS/ops/c/include/ops_lib_core.h(661,3) inlined into defdec_data_set.h(252,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /home/reguly/OPS/ops/c/include/ops_lib_core.h(661,3) inlined into defdec_data_set.h(252,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at /home/reguly/OPS/ops/c/include/ops_lib_core.h(661,3) inlined into defdec_data_set.h(261,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /home/reguly/OPS/ops/c/include/ops_lib_core.h(661,3) inlined into defdec_data_set.h(261,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at opensbli_ops.cpp(341,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at opensbli_ops.cpp(404,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between call:?1memcpy (406:38) and call:ops_par_loop_opensbliblock00Kernel031(const char *, ops_blo (598:7)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

defdec_data_set.h(6,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(12,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(13,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(15,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(21,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(22,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(24,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(30,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(31,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(33,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(39,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(40,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(42,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(48,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(49,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(51,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(60,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(66,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(67,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(69,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(78,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(84,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(85,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(87,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(96,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(102,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(103,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(105,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(114,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(120,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(121,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(123,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(132,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(138,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(139,14):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(141,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(150,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(159,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(168,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(177,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(186,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(195,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(204,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(213,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(222,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(231,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(240,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(249,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
defdec_data_set.h(258,12):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(305,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(307,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(309,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(311,26):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(313,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(315,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(317,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(319,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(321,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(323,26):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
opensbli_ops.cpp(330,35):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(331,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(331,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(331,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(331,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(331,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(331,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(343,37):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(344,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(344,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(344,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(344,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(344,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(351,37):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(352,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(352,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(352,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(352,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(352,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(359,37):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(360,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(360,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(360,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(360,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(360,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(367,37):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(368,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(368,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(368,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(368,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(368,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(375,37):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(376,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(376,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(376,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(376,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(376,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(383,37):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(384,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(384,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(384,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(384,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(384,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(391,37):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(392,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(406,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(407,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(407,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(407,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(412,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(413,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(413,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(413,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(418,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(419,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(419,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(419,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(424,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(425,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(425,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(425,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(425,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(425,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(425,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(433,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(434,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(434,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(434,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(439,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(440,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(440,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(444,38):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(445,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(445,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(449,38):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(450,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(450,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(454,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(455,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(455,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(459,38):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(460,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(460,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(464,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(465,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(465,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(469,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(470,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(470,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(474,39):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(475,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(475,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(479,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(480,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(480,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(484,39):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(485,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(504,39):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(505,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(524,39):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(525,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(543,39):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (32, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(544,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(557,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(558,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(558,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(558,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(558,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(558,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(565,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(566,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(566,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(566,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(566,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(566,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(573,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(574,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(574,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(574,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(574,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(574,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(581,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(582,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(582,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(582,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(582,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(582,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(589,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(590,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(590,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(590,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(590,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(590,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(597,39):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
opensbli_ops.cpp(598,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(598,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(598,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(598,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(598,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
opensbli_ops.cpp(240,1):remark #34051: REGISTER ALLOCATION : [main] opensbli_ops.cpp:240

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :    3119
            Global    :     326
            Local     :    2793
        Regenerable   :    1597
        Spilled       :      43
        
    Routine stack
        Variables     :   12716 bytes*
            Reads     :     523 [1.64e+01 ~ 16.4%]
            Writes    :     508 [6.03e+00 ~ 6.0%]
        Spills        :     304 bytes*
            Reads     :     195 [6.26e+00 ~ 6.3%]
            Writes    :      40 [1.60e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_dat<double>(ops_block, int, int *, int *, int *, int *, double *, const char *, const char *)) [2] /home/reguly/OPS/ops/c/include/ops_lib_core.h(658,40)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/reguly/OPS/ops/c/include/ops_lib_core.h(661,3)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /home/reguly/OPS/ops/c/include/ops_lib_core.h(661,3)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

/home/reguly/OPS/ops/c/include/ops_lib_core.h(658,40):remark #34051: REGISTER ALLOCATION : [_Z12ops_decl_datIdEP12ops_dat_coreP14ops_block_coreiPiS4_S4_S4_PT_PKcS8_] /home/reguly/OPS/ops/c/include/ops_lib_core.h:658

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r11 zmm0]
        
    Routine temporaries
        Total         :      32
            Global    :       8
            Local     :      24
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [6.06e+00 ~ 6.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_const<double>(const char *, int, const char *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_const<double>(const char *, int, const char *, double *)) [3] /home/reguly/OPS/ops/c/include/ops_lib_core.h(940,75)
  -> INLINE: (941,7) type_error(const double *, const char *)
  -> (942,21) OPSException::~OPSException(OPSException *)
  -> INLINE: (942,21) OPSException::OPSException(OPSException *, int)
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(76,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (943,8) OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (943,59) OPSException::operator<<<const char *>(OPSException *, const char *const &)
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (943,67) OPSException::operator<<<char [19]>(OPSException *, const char (&)[19])
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (944,11) OPSException::OPSException(OPSException *, const OPSException &)
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(82,22) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::rdbuf(const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const
  -> INLINE: (946,3) ops_decl_const2<double>(const char *, int, const char *, double *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/8/bits/basic_ios.h(460,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/basic_ios.h(460,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/basic_ios.h(460,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/basic_ios.h(460,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/streambuf(470,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/streambuf(470,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/home/reguly/OPS/ops/c/include/ops_exceptions.h(79,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/reguly/OPS/ops/c/include/ops_lib_core.h(940,75):remark #34051: REGISTER ALLOCATION : [_Z14ops_decl_constIdEvPKciS1_PT_] /home/reguly/OPS/ops/c/include/ops_lib_core.h:940

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     258
            Global    :      33
            Local     :     225
        Regenerable   :      60
        Spilled       :       6
        
    Routine stack
        Variables     :    2536 bytes*
            Reads     :      15 [3.20e+00 ~ 3.2%]
            Writes    :      57 [1.53e+01 ~ 15.3%]
        Spills        :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf(std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>> *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/8/iosfwd(96,11):remark #34051: REGISTER ALLOCATION : [_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1Ev] /usr/include/c++/8/iosfwd:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdi r12]
        
    Routine temporaries
        Total         :      13
            Global    :       8
            Local     :       5
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Code generation optimizations [cg]

/usr/include/c++/8/bits/char_traits.h(324,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/8/bits/char_traits.h:324

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::~OPSException(OPSException *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::~OPSException(OPSException *)) [10] /home/reguly/OPS/ops/c/include/ops_exceptions.h(75,37)
  -> INLINE: (75,38) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (75,38) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/reguly/OPS/ops/c/include/ops_exceptions.h(75,37):remark #34051: REGISTER ALLOCATION : [_ZN12OPSExceptionD1Ev] /home/reguly/OPS/ops/c/include/ops_exceptions.h:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 r13-r14]
        
    Routine temporaries
        Total         :      57
            Global    :      12
            Local     :      45
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       3 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::pointer_traits<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_pointer>::pointer_to(std::__make_not_void<std::pointer_traits<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::const_pointer>::element_type> &)

    Report from: Code generation optimizations [cg]

/usr/include/c++/8/bits/ptr_traits.h(146,7):remark #34051: REGISTER ALLOCATION : [_ZNSt14pointer_traitsIPKcE10pointer_toERS0_] /usr/include/c++/8/bits/ptr_traits.h:146

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_decl_const<int>(const char *, int, const char *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ops_decl_const<int>(const char *, int, const char *, int *)) [12] /home/reguly/OPS/ops/c/include/ops_lib_core.h(940,75)
  -> INLINE: (941,7) type_error(const int *, const char *)
  -> (942,21) OPSException::~OPSException(OPSException *)
  -> INLINE: (942,21) OPSException::OPSException(OPSException *, int)
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(76,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(76,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (943,8) OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (943,59) OPSException::operator<<<const char *>(OPSException *, const char *const &)
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (943,67) OPSException::operator<<<char [19]>(OPSException *, const char (&)[19])
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(88,8) OPSException::insert(OPSException *, const char *)
      -> (96,12) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *)
  -> INLINE: (944,11) OPSException::OPSException(OPSException *, const OPSException &)
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::exception::exception(std::exception *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const, std::ios_base::openmode)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(77,5) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: /home/reguly/OPS/ops/c/include/ops_exceptions.h:(82,22) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::rdbuf(const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const
  -> INLINE: (946,3) ops_decl_const2<int>(const char *, int, const char *, int *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /usr/include/c++/8/bits/basic_ios.h(460,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/basic_ios.h(460,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/basic_ios.h(460,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/bits/basic_ios.h(460,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/streambuf(470,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at /usr/include/c++/8/streambuf(470,7) inlined into /home/reguly/OPS/ops/c/include/ops_lib_core.h(945,11)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

/home/reguly/OPS/ops/c/include/ops_exceptions.h(79,7):remark #34026: call to memcpy implemented as a call to optimized library version
/home/reguly/OPS/ops/c/include/ops_lib_core.h(940,75):remark #34051: REGISTER ALLOCATION : [_Z14ops_decl_constIiEvPKciS1_PT_] /home/reguly/OPS/ops/c/include/ops_lib_core.h:940

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     258
            Global    :      33
            Local     :     225
        Regenerable   :      60
        Spilled       :       6
        
    Routine stack
        Variables     :    2536 bytes*
            Reads     :      15 [3.20e+00 ~ 3.2%]
            Writes    :      57 [1.53e+01 ~ 15.3%]
        Spills        :       8 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :       1 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel032(double *, double *, double *, double *, double *, const int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel032(double *, double *, double *, double *, double *, const int *)) [14] opensbliblock00_kernels.h(5,1)
  -> INLINE: (26,77) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (28,8) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (38,53) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (38,66) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (38,79) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(5,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel032PdS_S_S_S_PKi] opensbliblock00_kernels.h:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rdx rcx rbx rbp rsi rdi r8-r9 r13-r15 zmm0-zmm17]
        
    Routine temporaries
        Total         :      73
            Global    :      32
            Local     :      41
        Regenerable   :       1
        Spilled       :      17
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      14 [1.26e+01 ~ 12.6%]
            Writes    :      12 [1.08e+01 ~ 10.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel026(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel026(double *, double *, double *, double *, double *)) [15] opensbliblock00_kernels.h(43,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(43,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel026PdS_S_S_S_] opensbliblock00_kernels.h:43

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm3]
        
    Routine temporaries
        Total         :      28
            Global    :       0
            Local     :      28
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel027(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel027(double *, double *, double *, double *, double *)) [16] opensbliblock00_kernels.h(67,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(67,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel027PdS_S_S_S_] opensbliblock00_kernels.h:67

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm3]
        
    Routine temporaries
        Total         :      28
            Global    :       0
            Local     :      28
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel028(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel028(double *, double *, double *, double *, double *)) [17] opensbliblock00_kernels.h(91,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(91,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel028PdS_S_S_S_] opensbliblock00_kernels.h:91

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rsi rdi r8-r11 r13-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      68
            Global    :       0
            Local     :      68
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel029(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel029(double *, double *, double *, double *, double *)) [18] opensbliblock00_kernels.h(115,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(115,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel029PdS_S_S_S_] opensbliblock00_kernels.h:115

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rsi rdi r8-r11 r14-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      68
            Global    :       0
            Local     :      68
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel030(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel030(double *, double *, double *, double *, double *)) [19] opensbliblock00_kernels.h(139,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(139,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel030PdS_S_S_S_] opensbliblock00_kernels.h:139

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      88
            Global    :       0
            Local     :      88
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [8.20e-01 ~ 0.8%]
            Writes    :       1 [8.20e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel031(double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel031(double *, double *, double *, double *, double *)) [20] opensbliblock00_kernels.h(163,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(163,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel031PdS_S_S_S_] opensbliblock00_kernels.h:163

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      88
            Global    :       0
            Local     :      88
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [7.87e-01 ~ 0.8%]
            Writes    :       1 [7.87e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel033(const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel033(const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)) [21] opensbliblock00_kernels.h(189,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(189,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel033PKdS0_S0_S0_S0_PdS1_S1_S1_S1_] opensbliblock00_kernels.h:189

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      27
            Global    :       0
            Local     :      27
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel001(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel001(const double *, const double *, double *)) [22] opensbliblock00_kernels.h(203,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(203,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel001PKdS0_Pd] opensbliblock00_kernels.h:203

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel005(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel005(const double *, const double *, double *)) [23] opensbliblock00_kernels.h(209,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(209,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel005PKdS0_Pd] opensbliblock00_kernels.h:209

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel009(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel009(const double *, const double *, double *)) [24] opensbliblock00_kernels.h(215,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(215,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel009PKdS0_Pd] opensbliblock00_kernels.h:215

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      14
            Global    :       0
            Local     :      14
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel017(const double *, const double *, const double *, const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel017(const double *, const double *, const double *, const double *, const double *, double *)) [25] opensbliblock00_kernels.h(222,1)
  -> INLINE: (224,35) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (225,35) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (226,35) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(222,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel017PKdS0_S0_S0_S0_Pd] opensbliblock00_kernels.h:222

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rdx rcx rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      29
            Global    :       0
            Local     :      29
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel018(const double *, const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel018(const double *, const double *, double *)) [26] opensbliblock00_kernels.h(231,1)
  -> INLINE: (232,28) std::pow<double, int>(double, int)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(231,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel018PKdS0_Pd] opensbliblock00_kernels.h:231

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rdx rsi rdi zmm0-zmm4]
        
    Routine temporaries
        Total         :      17
            Global    :       0
            Local     :      17
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel000(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel000(const double *, double *)) [27] opensbliblock00_kernels.h(237,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(237,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel000PKdPd] opensbliblock00_kernels.h:237

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rsi rdi zmm0-zmm7]
        
    Routine temporaries
        Total         :      19
            Global    :       0
            Local     :      19
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel002(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel002(const double *, double *)) [28] opensbliblock00_kernels.h(244,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(244,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel002PKdPd] opensbliblock00_kernels.h:244

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8 zmm0-zmm6]
        
    Routine temporaries
        Total         :      31
            Global    :       0
            Local     :      31
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel003(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel003(const double *, double *)) [29] opensbliblock00_kernels.h(251,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(251,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel003PKdPd] opensbliblock00_kernels.h:251

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi zmm0-zmm7]
        
    Routine temporaries
        Total         :      27
            Global    :       0
            Local     :      27
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel004(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel004(const double *, double *)) [30] opensbliblock00_kernels.h(258,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(258,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel004PKdPd] opensbliblock00_kernels.h:258

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      19
            Global    :       0
            Local     :      19
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel006(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel006(const double *, double *)) [31] opensbliblock00_kernels.h(265,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(265,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel006PKdPd] opensbliblock00_kernels.h:265

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rsi rdi r8 zmm0-zmm6]
        
    Routine temporaries
        Total         :      31
            Global    :       0
            Local     :      31
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel007(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel007(const double *, double *)) [32] opensbliblock00_kernels.h(272,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(272,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel007PKdPd] opensbliblock00_kernels.h:272

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      27
            Global    :       0
            Local     :      27
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel008(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel008(const double *, double *)) [33] opensbliblock00_kernels.h(279,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(279,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel008PKdPd] opensbliblock00_kernels.h:279

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      18
            Global    :       0
            Local     :      18
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel010(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel010(const double *, double *)) [34] opensbliblock00_kernels.h(286,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(286,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel010PKdPd] opensbliblock00_kernels.h:286

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm6]
        
    Routine temporaries
        Total         :      30
            Global    :       0
            Local     :      30
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel011(const double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel011(const double *, double *)) [35] opensbliblock00_kernels.h(293,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(293,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel011PKdPd] opensbliblock00_kernels.h:293

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi zmm0-zmm6]
        
    Routine temporaries
        Total         :      26
            Global    :       0
            Local     :      26
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel024(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel024(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *)) [36] opensbliblock00_kernels.h(303,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(303,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel024PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_S1_] opensbliblock00_kernels.h:303

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     478
            Global    :      78
            Local     :     400
        Regenerable   :      14
        Spilled       :      62
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     456 bytes*
            Reads     :      63 [9.91e+00 ~ 9.9%]
            Writes    :      57 [8.96e+00 ~ 9.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel025(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel025(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *)) [37] opensbliblock00_kernels.h(495,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(495,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel025PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_] opensbliblock00_kernels.h:495

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     375
            Global    :      30
            Local     :     345
        Regenerable   :      15
        Spilled       :       5
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel035(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, const double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel035(const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, const double *)) [38] opensbliblock00_kernels.h(600,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(600,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel035PKdS0_S0_S0_S0_S0_S0_S0_S0_S0_PdS1_S1_S1_S1_S0_] opensbliblock00_kernels.h:600

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm14]
        
    Routine temporaries
        Total         :      48
            Global    :       0
            Local     :      48
        Regenerable   :      10
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: opensbliblock00Kernel034(const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, const double *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (opensbliblock00Kernel034(const double *, const double *, const double *, const double *, const double *, double *, double *, double *, double *, double *, const double *)) [39] opensbliblock00_kernels.h(616,1)


    Report from: Code generation optimizations [cg]

opensbliblock00_kernels.h(616,1):remark #34051: REGISTER ALLOCATION : [_Z24opensbliblock00Kernel034PKdS0_S0_S0_S0_PdS1_S1_S1_S1_S0_] opensbliblock00_kernels.h:616

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm14]
        
    Routine temporaries
        Total         :      43
            Global    :       0
            Local     :      43
        Regenerable   :       5
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ops_arg_gbl<double>(double *, int, const char *, ops_access)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (ops_arg_gbl<double>(double *, int, const char *, ops_access)) /home/reguly/OPS/ops/c/include/ops_lib_core.h(762,73)

===========================================================================

Begin optimization report for: ops_decl_const2<int>(const char *, int, const char *, int *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (ops_decl_const2<int>(const char *, int, const char *, int *)) /home/reguly/OPS/ops/c/include/ops_internal2.h(418,76)

===========================================================================

Begin optimization report for: ops_decl_const2<double>(const char *, int, const char *, double *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (ops_decl_const2<double>(const char *, int, const char *, double *)) /home/reguly/OPS/ops/c/include/ops_internal2.h(418,76)

===========================================================================

Begin optimization report for: OPSException::~OPSException(OPSException *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::~OPSException(OPSException *const)) [43] /home/reguly/OPS/ops/c/include/ops_exceptions.h(75,13)
  -> INLINE: (75,13) OPSException::~OPSException(OPSException *)
    -> INLINE: (75,38) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
    -> INLINE: (75,38) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *const)
       {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/home/reguly/OPS/ops/c/include/ops_exceptions.h(75,13):remark #34051: REGISTER ALLOCATION : [_ZN12OPSExceptionD0Ev] /home/reguly/OPS/ops/c/include/ops_exceptions.h:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8 r13-r14]
        
    Routine temporaries
        Total         :      58
            Global    :      12
            Local     :      46
        Regenerable   :       4
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       3 [0.00e+00 ~ 0.0%]
            Writes    :       3 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::OPSException(OPSException *, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::OPSException(OPSException *, int)) /home/reguly/OPS/ops/c/include/ops_exceptions.h(76,62)

===========================================================================

Begin optimization report for: OPSException::OPSException(OPSException *, const OPSException &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::OPSException(OPSException *, const OPSException &)) /home/reguly/OPS/ops/c/include/ops_exceptions.h(77,43)

===========================================================================

Begin optimization report for: OPSException::insert(OPSException *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::insert(OPSException *, const char *)) /home/reguly/OPS/ops/c/include/ops_exceptions.h(95,5)

===========================================================================

Begin optimization report for: OPSException::what(const OPSException *) const

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (OPSException::what(const OPSException *) const) [47] /home/reguly/OPS/ops/c/include/ops_exceptions.h(114,46)
  -> INLINE: (115,22) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (115,22) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &&)
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (115,28) std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::str(std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::__string_type *, const std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}
  -> INLINE: (116,29) std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::c_str(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> *) const
     {{ Inlining of routines from system headers is omitted. Use -qopt-report=3 to view full report. }}


    Report from: Code generation optimizations [cg]

/usr/include/c++/8/bits/char_traits.h(359,33):remark #34026: call to memcpy implemented as a call to optimized library version
/home/reguly/OPS/ops/c/include/ops_exceptions.h(114,46):remark #34051: REGISTER ALLOCATION : [_ZNK12OPSException4whatEv] /home/reguly/OPS/ops/c/include/ops_exceptions.h:114

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8 r14]
        
    Routine temporaries
        Total         :      66
            Global    :      21
            Local     :      45
        Regenerable   :      13
        Spilled       :       1
        
    Routine stack
        Variables     :      40 bytes*
            Reads     :      14 [9.01e+00 ~ 9.0%]
            Writes    :       7 [7.91e+00 ~ 7.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: OPSException::operator<<<const char *>(OPSException *, const char *const &)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<const char *>(OPSException *, const char *const &)) /home/reguly/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<char [46]>(OPSException *, const char (&)[46])) /home/reguly/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: OPSException::operator<<<char [19]>(OPSException *, const char (&)[19])

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (OPSException::operator<<<char [19]>(OPSException *, const char (&)[19])) /home/reguly/OPS/ops/c/include/ops_exceptions.h(87,5)

===========================================================================

Begin optimization report for: std::pow<double, int>(double, int)

    Report from: Code generation optimizations [cg]

/usr/include/c++/8/cmath(416,5):remark #34051: REGISTER ALLOCATION : [_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_Xsr3std12__is_integerIS2_EE7__valueEE6__typeENS4_IS3_Xsr3std12__is_integerIS3_EE7__valueEE6__typeEE6__typeES2_S3_] /usr/include/c++/8/cmath:416

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      16
            Global    :       7
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [143] <compiler generated>


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: type_error(const int *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (type_error(const int *, const char *)) /home/reguly/OPS/ops/c/include/ops_internal1.h(113,55)

===========================================================================

Begin optimization report for: type_error(const double *, const char *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (type_error(const double *, const char *)) /home/reguly/OPS/ops/c/include/ops_internal1.h(105,58)

===========================================================================

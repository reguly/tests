//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_rtm_kernel_populate(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_rtm_kernel_populate_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"rtm_kernel_populate");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "rtm_kernel_populate");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim4_rtm_kernel_populate = args[4].dat->size[0];
  int ydim4_rtm_kernel_populate = args[4].dat->size[1];
  int xdim5_rtm_kernel_populate = args[5].dat->size[0];
  int ydim5_rtm_kernel_populate = args[5].dat->size[1];
  int xdim6_rtm_kernel_populate = args[6].dat->size[0];
  int ydim6_rtm_kernel_populate = args[6].dat->size[1];
  int zdim6_rtm_kernel_populate = args[6].dat->size[2];

  //set up initial pointers and exchange halos if necessary
  int * __restrict__ dispx = (int *)args[0].data;


  int * __restrict__ dispy = (int *)args[1].data;


  int * __restrict__ dispz = (int *)args[2].data;



  int base4 = args[4].dat->base_offset;
  float * __restrict__ rho_p = (float *)(args[4].data + base4);

  int base5 = args[5].dat->base_offset;
  float * __restrict__ mu_p = (float *)(args[5].data + base5);

  int base6 = args[6].dat->base_offset;
  float * __restrict__ yy_p = (float *)(args[6].data + base6);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 7);
  ops_halo_exchanges(args,7,range);
  ops_H_D_exchanges_host(args, 7);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for collapse(2)
  for ( int n_z=start[2]; n_z<end[2]; n_z++ ){
    for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
      #ifdef __INTEL_COMPILER
      #pragma loop_count(10000)
      #pragma omp simd
      #elif defined(__clang__)
      #pragma clang loop vectorize(assume_safety)
      #elif defined(__GNUC__)
      #pragma GCC ivdep
      #else
      #pragma simd
      #endif
      for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
        int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y, arg_idx[2]+n_z};
        ACC<float> rho(xdim4_rtm_kernel_populate, ydim4_rtm_kernel_populate, rho_p + n_x*1 + n_y * xdim4_rtm_kernel_populate*1 + n_z * xdim4_rtm_kernel_populate * ydim4_rtm_kernel_populate*1);
        ACC<float> mu(xdim5_rtm_kernel_populate, ydim5_rtm_kernel_populate, mu_p + n_x*1 + n_y * xdim5_rtm_kernel_populate*1 + n_z * xdim5_rtm_kernel_populate * ydim5_rtm_kernel_populate*1);
        #ifdef OPS_SOA
        ACC<float> yy(6, xdim6_rtm_kernel_populate, ydim6_rtm_kernel_populate, zdim6_rtm_kernel_populate, yy_p + n_x*1 + n_y * xdim6_rtm_kernel_populate*1 + n_z * xdim6_rtm_kernel_populate * ydim6_rtm_kernel_populate*1);
        #else
        ACC<float> yy(6, xdim6_rtm_kernel_populate, ydim6_rtm_kernel_populate, zdim6_rtm_kernel_populate, yy_p + 6*(n_x*1 + n_y * xdim6_rtm_kernel_populate*1 + n_z * xdim6_rtm_kernel_populate * ydim6_rtm_kernel_populate*1));
        #endif
        
  float x = 1.0f*((float)(idx[0]-nx/2)/nx);
  float y = 1.0f*((float)(idx[1]-ny/2)/ny);
  float z = 1.0f*((float)(idx[2]-nz/2)/nz);
  const float C = 1.f;
  const float r0 = 0.001f;
  rho(0,0,0) = 1.f;
  mu(0,0,0) = 1.f;

  yy(0,0,0,0) = (1.f/3.f)*C*exp(-(x*x+y*y+z*z)/r0);
  yy(1,0,0,0) = (1.f/3.f)*C*exp(-(x*x+y*y+z*z)/r0);
  yy(2,0,0,0) = (1.f/3.f)*C*exp(-(x*x+y*y+z*z)/r0);

  yy(3,0,0,0) = 0.0;
  yy(4,0,0,0) = 0.0;
  yy(5,0,0,0) = 0.0;

      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 7);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_rtm_kernel_populate(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)ops_malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  char *tmp = (char*)ops_malloc(1*sizeof(int));
  memcpy(tmp, arg0.data,1*sizeof(int));
  desc->args[0].data = tmp;
  desc->args[1] = arg1;
  tmp = (char*)ops_malloc(1*sizeof(int));
  memcpy(tmp, arg1.data,1*sizeof(int));
  desc->args[1].data = tmp;
  desc->args[2] = arg2;
  tmp = (char*)ops_malloc(1*sizeof(int));
  memcpy(tmp, arg2.data,1*sizeof(int));
  desc->args[2].data = tmp;
  desc->args[3] = arg3;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->function = ops_par_loop_rtm_kernel_populate_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"rtm_kernel_populate");
  }
  ops_enqueue_kernel(desc);
}
#endif

//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_calc_ytemp_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
#else
void ops_par_loop_calc_ytemp_kernel_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,5,range,2)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,2,"calc_ytemp_kernel");
    block->instance->OPS_kernels[2].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "calc_ytemp_kernel");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 5,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim2_calc_ytemp_kernel = args[2].dat->size[0];
  int ydim2_calc_ytemp_kernel = args[2].dat->size[1];
  int zdim2_calc_ytemp_kernel = args[2].dat->size[2];
  int xdim3_calc_ytemp_kernel = args[3].dat->size[0];
  int ydim3_calc_ytemp_kernel = args[3].dat->size[1];
  int zdim3_calc_ytemp_kernel = args[3].dat->size[2];
  int xdim4_calc_ytemp_kernel = args[4].dat->size[0];
  int ydim4_calc_ytemp_kernel = args[4].dat->size[1];
  int zdim4_calc_ytemp_kernel = args[4].dat->size[2];

  //set up initial pointers and exchange halos if necessary

  float * __restrict__ dt = (float *)args[1].data;


  int base2 = args[2].dat->base_offset;
  float * __restrict__ yy_p = (float *)(args[2].data + base2);

  int base3 = args[3].dat->base_offset;
  float * __restrict__ k_p = (float *)(args[3].data + base3);

  int base4 = args[4].dat->base_offset;
  float * __restrict__ ytemp_p = (float *)(args[4].data + base4);



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_host(args, 5);
  ops_halo_exchanges(args,5,range);
  ops_H_D_exchanges_host(args, 5);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[2].mpi_time += __t1-__t2;
  }

  #pragma omp parallel for collapse(2)
  for ( int n_z=start[2]; n_z<end[2]; n_z++ ){
    for ( int n_y=start[1]; n_y<end[1]; n_y++ ){
      #ifdef __INTEL_COMPILER
      #pragma loop_count(10000)
      #pragma omp simd
      #elif defined(__clang__)
      #pragma clang loop vectorize(assume_safety)
      #elif defined(__GNUC__)
      #pragma GCC ivdep
      #else
      #pragma simd
      #endif
      for ( int n_x=start[0]; n_x<end[0]; n_x++ ){
        int idx[] = {arg_idx[0]+n_x, arg_idx[1]+n_y, arg_idx[2]+n_z};
        #ifdef OPS_SOA
        const ACC<float> yy(6, xdim2_calc_ytemp_kernel, ydim2_calc_ytemp_kernel, zdim2_calc_ytemp_kernel, yy_p + n_x*1 + n_y * xdim2_calc_ytemp_kernel*1 + n_z * xdim2_calc_ytemp_kernel * ydim2_calc_ytemp_kernel*1);
        #else
        const ACC<float> yy(6, xdim2_calc_ytemp_kernel, ydim2_calc_ytemp_kernel, zdim2_calc_ytemp_kernel, yy_p + 6*(n_x*1 + n_y * xdim2_calc_ytemp_kernel*1 + n_z * xdim2_calc_ytemp_kernel * ydim2_calc_ytemp_kernel*1));
        #endif
        #ifdef OPS_SOA
        ACC<float> k(6, xdim3_calc_ytemp_kernel, ydim3_calc_ytemp_kernel, zdim3_calc_ytemp_kernel, k_p + n_x*1 + n_y * xdim3_calc_ytemp_kernel*1 + n_z * xdim3_calc_ytemp_kernel * ydim3_calc_ytemp_kernel*1);
        #else
        ACC<float> k(6, xdim3_calc_ytemp_kernel, ydim3_calc_ytemp_kernel, zdim3_calc_ytemp_kernel, k_p + 6*(n_x*1 + n_y * xdim3_calc_ytemp_kernel*1 + n_z * xdim3_calc_ytemp_kernel * ydim3_calc_ytemp_kernel*1));
        #endif
        #ifdef OPS_SOA
        ACC<float> ytemp(6, xdim4_calc_ytemp_kernel, ydim4_calc_ytemp_kernel, zdim4_calc_ytemp_kernel, ytemp_p + n_x*1 + n_y * xdim4_calc_ytemp_kernel*1 + n_z * xdim4_calc_ytemp_kernel * ydim4_calc_ytemp_kernel*1);
        #else
        ACC<float> ytemp(6, xdim4_calc_ytemp_kernel, ydim4_calc_ytemp_kernel, zdim4_calc_ytemp_kernel, ytemp_p + 6*(n_x*1 + n_y * xdim4_calc_ytemp_kernel*1 + n_z * xdim4_calc_ytemp_kernel * ydim4_calc_ytemp_kernel*1));
        #endif
        

  for (int i = 0; i < 6; i++) {
    k(i,0,0,0) = k(i,0,0,0)* *dt;
    ytemp(i,0,0,0) = yy(i,0,0,0) + k(i,0,0,0)*0.5f;
  }


      }
    }
  }
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[2].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_host(args, 5);
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[2].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg4);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_calc_ytemp_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 0;
  desc->index = 2;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 2;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 5;
  desc->args = (ops_arg*)ops_malloc(5*sizeof(ops_arg));
  desc->args[0] = arg0;
  desc->args[1] = arg1;
  char *tmp = (char*)ops_malloc(1*sizeof(float));
  memcpy(tmp, arg1.data,1*sizeof(float));
  desc->args[1].data = tmp;
  desc->args[2] = arg2;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg2.dat->index;
  desc->args[3] = arg3;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg3.dat->index;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->function = ops_par_loop_calc_ytemp_kernel_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,2,"calc_ytemp_kernel");
  }
  ops_enqueue_kernel(desc);
}
#endif

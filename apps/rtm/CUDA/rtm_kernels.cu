//
// auto-generated by ops.py//

//header
#include <cuda.h>
#define OPS_API 2
#define OPS_3D
#define OPS_SOA
#include "ops_lib_core.h"

#include "ops_cuda_rt_support.h"
#include "ops_cuda_reduction.h"

#include <cuComplex.h>

#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ float dx;
__constant__ float dz;
__constant__ float invdx;
__constant__ float invdy;
__constant__ float invdz;
__constant__ int nx;
__constant__ int ny;
__constant__ int nz;
__constant__ int pml_width;
__constant__ int xbeg;
__constant__ int ybeg;
__constant__ int zbeg;
__constant__ int xend;
__constant__ int yend;
__constant__ int zend;
__constant__ int xpmlbeg;
__constant__ int ypmlbeg;
__constant__ int zpmlbeg;
__constant__ int xpmlend;
__constant__ int ypmlend;
__constant__ int zpmlend;
__constant__ float *coeffs;
__constant__ int halff;
__constant__ int order;
__constant__ float *c;
__constant__ float *cx;
__constant__ float *cy;
__constant__ float *cz;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"dx")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(dx, dat, dim*size));
  }
  else
  if (!strcmp(name,"dz")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(dz, dat, dim*size));
  }
  else
  if (!strcmp(name,"invdx")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invdx, dat, dim*size));
  }
  else
  if (!strcmp(name,"invdy")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invdy, dat, dim*size));
  }
  else
  if (!strcmp(name,"invdz")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(invdz, dat, dim*size));
  }
  else
  if (!strcmp(name,"nx")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(nx, dat, dim*size));
  }
  else
  if (!strcmp(name,"ny")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(ny, dat, dim*size));
  }
  else
  if (!strcmp(name,"nz")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(nz, dat, dim*size));
  }
  else
  if (!strcmp(name,"pml_width")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(pml_width, dat, dim*size));
  }
  else
  if (!strcmp(name,"xbeg")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(xbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"ybeg")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(ybeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"zbeg")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(zbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"xend")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(xend, dat, dim*size));
  }
  else
  if (!strcmp(name,"yend")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(yend, dat, dim*size));
  }
  else
  if (!strcmp(name,"zend")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(zend, dat, dim*size));
  }
  else
  if (!strcmp(name,"xpmlbeg")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(xpmlbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"ypmlbeg")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(ypmlbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"zpmlbeg")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(zpmlbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"xpmlend")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(xpmlend, dat, dim*size));
  }
  else
  if (!strcmp(name,"ypmlend")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(ypmlend, dat, dim*size));
  }
  else
  if (!strcmp(name,"zpmlend")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(zpmlend, dat, dim*size));
  }
  else
  if (!strcmp(name,"coeffs")) {
    char *temp; cutilSafeCall(instance->ostream(),cudaMalloc((void**)&temp,dim*size));
    cutilSafeCall(instance->ostream(),cudaMemcpy(temp,dat,dim*size,cudaMemcpyHostToDevice));
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(coeffs, &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"halff")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(halff, dat, dim*size));
  }
  else
  if (!strcmp(name,"order")) {
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(order, dat, dim*size));
  }
  else
  if (!strcmp(name,"c")) {
    char *temp; cutilSafeCall(instance->ostream(),cudaMalloc((void**)&temp,dim*size));
    cutilSafeCall(instance->ostream(),cudaMemcpy(temp,dat,dim*size,cudaMemcpyHostToDevice));
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(c, &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cx")) {
    char *temp; cutilSafeCall(instance->ostream(),cudaMalloc((void**)&temp,dim*size));
    cutilSafeCall(instance->ostream(),cudaMemcpy(temp,dat,dim*size,cudaMemcpyHostToDevice));
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(cx, &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cy")) {
    char *temp; cutilSafeCall(instance->ostream(),cudaMalloc((void**)&temp,dim*size));
    cutilSafeCall(instance->ostream(),cudaMemcpy(temp,dat,dim*size,cudaMemcpyHostToDevice));
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(cy, &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cz")) {
    char *temp; cutilSafeCall(instance->ostream(),cudaMalloc((void**)&temp,dim*size));
    cutilSafeCall(instance->ostream(),cudaMemcpy(temp,dat,dim*size,cudaMemcpyHostToDevice));
    cutilSafeCall(instance->ostream(),cudaMemcpyToSymbol(cz, &temp, sizeof(char *)));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "rtm_kernel_populate_cuda_kernel.cu"
#include "fd3d_pml_kernel_cuda_kernel.cu"
#include "calc_ytemp_kernel_cuda_kernel.cu"
#include "calc_ytemp2_kernel_cuda_kernel.cu"
#include "final_update_kernel_cuda_kernel.cu"

//
// auto-generated by ops.py
//

//user function

// host stub function
#ifndef OPS_LAZY
void ops_par_loop_rtm_kernel_populate(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
#else
void ops_par_loop_rtm_kernel_populate_execute(ops_kernel_descriptor *desc) {
  ops_block block = desc->block;
  int dim = desc->dim;
  int *range = desc->range;
  ops_arg arg0 = desc->args[0];
  ops_arg arg1 = desc->args[1];
  ops_arg arg2 = desc->args[2];
  ops_arg arg3 = desc->args[3];
  ops_arg arg4 = desc->args[4];
  ops_arg arg5 = desc->args[5];
  ops_arg arg6 = desc->args[6];
  #endif

  //Timing
  double __t1,__t2,__c1,__c2;

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4,
 arg5, arg6};



  #if defined(CHECKPOINTING) && !defined(OPS_LAZY)
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"rtm_kernel_populate");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&__c2,&__t2);
  }

  #ifdef OPS_DEBUG
  ops_register_args(block->instance, args, "rtm_kernel_populate");
  #endif


  //compute locally allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];
  #if defined(OPS_LAZY) || !defined(OPS_MPI)
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
  }
  #else
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #endif

  #if defined(OPS_MPI)
  #if defined(OPS_LAZY)
  sub_block_list sb = OPS_sub_block_list[block->index];
  arg_idx[0] = sb->decomp_disp[0];
  arg_idx[1] = sb->decomp_disp[1];
  arg_idx[2] = sb->decomp_disp[2];
  #else
  arg_idx[0] -= start[0];
  arg_idx[1] -= start[1];
  arg_idx[2] -= start[2];
  #endif
  #else //OPS_MPI
  arg_idx[0] = 0;
  arg_idx[1] = 0;
  arg_idx[2] = 0;
  #endif //OPS_MPI

  //initialize global variable with the dimension of dats
  int xdim4_rtm_kernel_populate = args[4].dat->size[0];
  int ydim4_rtm_kernel_populate = args[4].dat->size[1];
  int xdim5_rtm_kernel_populate = args[5].dat->size[0];
  int ydim5_rtm_kernel_populate = args[5].dat->size[1];
  int xdim6_rtm_kernel_populate = args[6].dat->size[0];
  int ydim6_rtm_kernel_populate = args[6].dat->size[1];
  int zdim6_rtm_kernel_populate = args[6].dat->size[2];

  //set up initial pointers and exchange halos if necessary
  int dispx_val = *(int *)args[0].data;


  int dispy_val = *(int *)args[1].data;


  int dispz_val = *(int *)args[2].data;



  int base4 = args[4].dat->base_offset/sizeof(float);
  float* rho_p = (float*)args[4].data_d;

  int base5 = args[5].dat->base_offset/sizeof(float);
  float* mu_p = (float*)args[5].data_d;

  int base6 = args[6].dat->base_offset/sizeof(float);
  float* yy_p = (float*)args[6].data_d;



  #ifndef OPS_LAZY
  //Halo Exchanges
  ops_H_D_exchanges_device(args, 7);
  ops_halo_exchanges(args,7,range);
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
  }

  int start_0 = start[0];
  int end_0 = end[0];
  int arg_idx_0 = arg_idx[0];
  int start_1 = start[1];
  int end_1 = end[1];
  int arg_idx_1 = arg_idx[1];
  int start_2 = start[2];
  int end_2 = end[2];
  int arg_idx_2 = arg_idx[2];
  if ((end[0]-start[0])>0 && (end[1]-start[1])>0 && (end[2]-start[2])>0) {
    block->instance->sycl_instance->queue->submit([&](cl::sycl::handler &cgh) {

      auto nx_sycl = (*nx_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto ny_sycl = (*ny_p).template get_access<cl::sycl::access::mode::read>(cgh);
      auto nz_sycl = (*nz_p).template get_access<cl::sycl::access::mode::read>(cgh);

      cgh.parallel_for<class rtm_kernel_populate_kernel>(cl::sycl::nd_range<3>(cl::sycl::range<3>(
           ((end[2]-start[2]-1)/block->instance->OPS_block_size_z+1)*block->instance->OPS_block_size_z,
           ((end[1]-start[1]-1)/block->instance->OPS_block_size_y+1)*block->instance->OPS_block_size_y,
            ((end[0]-start[0]-1)/block->instance->OPS_block_size_x+1)*block->instance->OPS_block_size_x
             ),cl::sycl::range<3>(
             block->instance->OPS_block_size_z,
             block->instance->OPS_block_size_y,
      block->instance->OPS_block_size_x
             ))
      , [=](cl::sycl::nd_item<3> item
      ) [[intel::kernel_args_restrict]] {
        int n_z = item.get_global_id(0)+start_2;
        int n_y = item.get_global_id(1)+start_1;
        int n_x = item.get_global_id(2)+start_0;
        int idx[] = {arg_idx_0+n_x, arg_idx_1+n_y, arg_idx_2+n_z};
        ACC<float> rho(xdim4_rtm_kernel_populate, ydim4_rtm_kernel_populate, &rho_p[0] + base4 + n_x*1 + n_y * xdim4_rtm_kernel_populate*1 + n_z * xdim4_rtm_kernel_populate * ydim4_rtm_kernel_populate*1);
        ACC<float> mu(xdim5_rtm_kernel_populate, ydim5_rtm_kernel_populate, &mu_p[0] + base5 + n_x*1 + n_y * xdim5_rtm_kernel_populate*1 + n_z * xdim5_rtm_kernel_populate * ydim5_rtm_kernel_populate*1);
        #ifdef OPS_SOA
        ACC<float> yy(6, xdim6_rtm_kernel_populate, ydim6_rtm_kernel_populate, zdim6_rtm_kernel_populate, &yy_p[0] + base6 + n_x*1 + n_y * xdim6_rtm_kernel_populate*1 + n_z * xdim6_rtm_kernel_populate * ydim6_rtm_kernel_populate*1);
        #else
        ACC<float> yy(6, xdim6_rtm_kernel_populate, ydim6_rtm_kernel_populate, zdim6_rtm_kernel_populate, &yy_p[0] + 6*(n_x*1 + n_y * xdim6_rtm_kernel_populate*1 + n_z * xdim6_rtm_kernel_populate * ydim6_rtm_kernel_populate*1));
        #endif
        const int *dispx = &dispx_val;
        const int *dispy = &dispy_val;
        const int *dispz = &dispz_val;
        //USER CODE
        if (n_x < end_0 && n_y < end_1 && n_z < end_2) {
          
  float x = 1.0f*((float)(idx[0]-nx_sycl[0]/2)/nx_sycl[0]);
  float y = 1.0f*((float)(idx[1]-ny_sycl[0]/2)/ny_sycl[0]);
  float z = 1.0f*((float)(idx[2]-nz_sycl[0]/2)/nz_sycl[0]);
  const float C = 1.f;
  const float r0 = 0.001f;
  rho(0,0,0) = 1.f;
  mu(0,0,0) = 1.f;

  yy(0,0,0,0) = (1.f/3.f)*C*cl::sycl::exp(-(x*x+y*y+z*z)/r0);
  yy(1,0,0,0) = (1.f/3.f)*C*cl::sycl::exp(-(x*x+y*y+z*z)/r0);
  yy(2,0,0,0) = (1.f/3.f)*C*cl::sycl::exp(-(x*x+y*y+z*z)/r0);

  yy(3,0,0,0) = 0.0;
  yy(4,0,0,0) = 0.0;
  yy(5,0,0,0) = 0.0;

        }
      });
    });
  }
  if (block->instance->OPS_diags > 1) {
    block->instance->sycl_instance->queue->wait();
    ops_timers_core(&__c2,&__t2);
    block->instance->OPS_kernels[0].time += __t2-__t1;
  }
  #ifndef OPS_LAZY
  ops_set_dirtybit_device(args, 7);
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);
  #endif

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&__c1,&__t1);
    block->instance->OPS_kernels[0].mpi_time += __t1-__t2;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
  }
}


#ifdef OPS_LAZY
void ops_par_loop_rtm_kernel_populate(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {
  ops_kernel_descriptor *desc = (ops_kernel_descriptor *)calloc(1,sizeof(ops_kernel_descriptor));
  desc->name = name;
  desc->block = block;
  desc->dim = dim;
  desc->device = 1;
  desc->index = 0;
  desc->hash = 5381;
  desc->hash = ((desc->hash << 5) + desc->hash) + 0;
  for ( int i=0; i<6; i++ ){
    desc->range[i] = range[i];
    desc->orig_range[i] = range[i];
    desc->hash = ((desc->hash << 5) + desc->hash) + range[i];
  }
  desc->nargs = 7;
  desc->args = (ops_arg*)ops_malloc(7*sizeof(ops_arg));
  desc->args[0] = arg0;
  char *tmp = (char*)ops_malloc(1*sizeof(int));
  memcpy(tmp, arg0.data,1*sizeof(int));
  desc->args[0].data = tmp;
  desc->args[1] = arg1;
  tmp = (char*)ops_malloc(1*sizeof(int));
  memcpy(tmp, arg1.data,1*sizeof(int));
  desc->args[1].data = tmp;
  desc->args[2] = arg2;
  tmp = (char*)ops_malloc(1*sizeof(int));
  memcpy(tmp, arg2.data,1*sizeof(int));
  desc->args[2].data = tmp;
  desc->args[3] = arg3;
  desc->args[4] = arg4;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg4.dat->index;
  desc->args[5] = arg5;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg5.dat->index;
  desc->args[6] = arg6;
  desc->hash = ((desc->hash << 5) + desc->hash) + arg6.dat->index;
  desc->function = ops_par_loop_rtm_kernel_populate_execute;
  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"rtm_kernel_populate");
  }
  ops_enqueue_kernel(desc);
}
#endif

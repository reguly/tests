//
// auto-generated by ops.py
//

#define OPS_GPU

extern int xdim2_calc_ytemp_kernel;
int xdim2_calc_ytemp_kernel_h = -1;
extern int ydim2_calc_ytemp_kernel;
int ydim2_calc_ytemp_kernel_h = -1;
extern int zdim2_calc_ytemp_kernel;
int zdim2_calc_ytemp_kernel_h = -1;
extern int xdim3_calc_ytemp_kernel;
int xdim3_calc_ytemp_kernel_h = -1;
extern int ydim3_calc_ytemp_kernel;
int ydim3_calc_ytemp_kernel_h = -1;
extern int zdim3_calc_ytemp_kernel;
int zdim3_calc_ytemp_kernel_h = -1;
extern int xdim4_calc_ytemp_kernel;
int xdim4_calc_ytemp_kernel_h = -1;
extern int ydim4_calc_ytemp_kernel;
int ydim4_calc_ytemp_kernel_h = -1;
extern int zdim4_calc_ytemp_kernel;
int zdim4_calc_ytemp_kernel_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void calc_ytemp_kernel_c_wrapper(
  int *p_a0,
  float p_a1,
  float *p_a2,
  float *p_a3,
  float *p_a4,
  int arg_idx0, int arg_idx1, int arg_idx2,
  int x_size, int y_size, int z_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_calc_ytemp_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4) {

  //Timing
  double t1,t2,c1,c2;
  ops_arg args[5] = { arg0, arg1, arg2, arg3, arg4};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,5,range,2)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,2,"calc_ytemp_kernel");
    block->instance->OPS_kernels[2].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block

  int start[3];
  int end[3];

  int arg_idx[3];
  int arg_idx_base[3];
  #ifdef OPS_MPI
  if (compute_ranges(args, 5,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  for ( int n=0; n<3; n++ ){
    arg_idx_base[n] = arg_idx[n];
  }

  int dat2 = args[2].dat->elem_size;
  int dat3 = args[3].dat->elem_size;
  int dat4 = args[4].dat->elem_size;


  //set up initial pointers
  int *p_a0 = NULL;

  float *p_a1 = (float *)args[1].data;
  long long int base2 = args[2].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) * start[0] * args[2].stencil->stride[0];
  base2 = base2 + (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) *
    args[2].dat->size[0] *
    start[1] * args[2].stencil->stride[1];
  base2 = base2 + (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    start[2] * args[2].stencil->stride[2];
  #ifdef OPS_GPU
  float *p_a2 = (float *)((char *)args[2].data_d + base2);
  #else
  float *p_a2 = (float *)((char *)args[2].data + base2);
  #endif

  long long int base3 = args[3].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) * start[0] * args[3].stencil->stride[0];
  base3 = base3 + (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) *
    args[3].dat->size[0] *
    start[1] * args[3].stencil->stride[1];
  base3 = base3 + (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    start[2] * args[3].stencil->stride[2];
  #ifdef OPS_GPU
  float *p_a3 = (float *)((char *)args[3].data_d + base3);
  #else
  float *p_a3 = (float *)((char *)args[3].data + base3);
  #endif

  long long int base4 = args[4].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) * start[0] * args[4].stencil->stride[0];
  base4 = base4 + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    start[1] * args[4].stencil->stride[1];
  base4 = base4 + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    start[2] * args[4].stencil->stride[2];
  #ifdef OPS_GPU
  float *p_a4 = (float *)((char *)args[4].data_d + base4);
  #else
  float *p_a4 = (float *)((char *)args[4].data + base4);
  #endif


  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  //initialize global variable with the dimension of dats
  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  if (xdim2 != xdim2_calc_ytemp_kernel_h || ydim2 != ydim2_calc_ytemp_kernel_h || xdim3 != xdim3_calc_ytemp_kernel_h || ydim3 != ydim3_calc_ytemp_kernel_h || xdim4 != xdim4_calc_ytemp_kernel_h || ydim4 != ydim4_calc_ytemp_kernel_h) {
    xdim2_calc_ytemp_kernel = xdim2;
    xdim2_calc_ytemp_kernel_h = xdim2;
    ydim2_calc_ytemp_kernel = ydim2;
    ydim2_calc_ytemp_kernel_h = ydim2;
    xdim3_calc_ytemp_kernel = xdim3;
    xdim3_calc_ytemp_kernel_h = xdim3;
    ydim3_calc_ytemp_kernel = ydim3;
    ydim3_calc_ytemp_kernel_h = ydim3;
    xdim4_calc_ytemp_kernel = xdim4;
    xdim4_calc_ytemp_kernel_h = xdim4;
    ydim4_calc_ytemp_kernel = ydim4;
    ydim4_calc_ytemp_kernel_h = ydim4;
  }

  //Halo Exchanges

  #ifdef OPS_GPU
  ops_H_D_exchanges_device(args, 5);
  #else
  ops_H_D_exchanges_host(args, 5);
  #endif
  ops_halo_exchanges(args,5,range);

  #ifdef OPS_GPU
  ops_H_D_exchanges_device(args, 5);
  #else
  ops_H_D_exchanges_host(args, 5);
  #endif
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[2].mpi_time += t2-t1;
  }

  calc_ytemp_kernel_c_wrapper(
    p_a0,
    *p_a1,
    p_a2,
    p_a3,
    p_a4,
    arg_idx[0], arg_idx[1], arg_idx[2],
    x_size, y_size, z_size);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[2].time += t1-t2;
  }
  #ifdef OPS_GPU
  ops_set_dirtybit_device(args, 5);
  #else
  ops_set_dirtybit_host(args, 5);
  #endif
  ops_set_halo_dirtybit3(&args[3],range);
  ops_set_halo_dirtybit3(&args[4],range);

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[2].mpi_time += t2-t1;
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[2].transfer += ops_compute_transfer(dim, start, end, &arg4);
  }
}

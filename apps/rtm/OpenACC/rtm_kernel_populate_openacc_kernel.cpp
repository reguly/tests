//
// auto-generated by ops.py
//

#define OPS_GPU

extern int xdim4_rtm_kernel_populate;
int xdim4_rtm_kernel_populate_h = -1;
extern int ydim4_rtm_kernel_populate;
int ydim4_rtm_kernel_populate_h = -1;
extern int zdim4_rtm_kernel_populate;
int zdim4_rtm_kernel_populate_h = -1;
extern int xdim5_rtm_kernel_populate;
int xdim5_rtm_kernel_populate_h = -1;
extern int ydim5_rtm_kernel_populate;
int ydim5_rtm_kernel_populate_h = -1;
extern int zdim5_rtm_kernel_populate;
int zdim5_rtm_kernel_populate_h = -1;
extern int xdim6_rtm_kernel_populate;
int xdim6_rtm_kernel_populate_h = -1;
extern int ydim6_rtm_kernel_populate;
int ydim6_rtm_kernel_populate_h = -1;
extern int zdim6_rtm_kernel_populate;
int zdim6_rtm_kernel_populate_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void rtm_kernel_populate_c_wrapper(
  int p_a0,
  int p_a1,
  int p_a2,
  int *p_a3,
  float *p_a4,
  float *p_a5,
  float *p_a6,
  int arg_idx0, int arg_idx1, int arg_idx2,
  int x_size, int y_size, int z_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_rtm_kernel_populate(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3,
 ops_arg arg4, ops_arg arg5, ops_arg arg6) {

  //Timing
  double t1,t2,c1,c2;
  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,7,range,0)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,0,"rtm_kernel_populate");
    block->instance->OPS_kernels[0].count++;
    ops_timers_core(&c1,&t1);
  }

  //compute locally allocated range for the sub-block

  int start[3];
  int end[3];

  int arg_idx[3];
  int arg_idx_base[3];
  #ifdef OPS_MPI
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #else //OPS_MPI
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif
  for ( int n=0; n<3; n++ ){
    arg_idx_base[n] = arg_idx[n];
  }

  int dat4 = args[4].dat->elem_size;
  int dat5 = args[5].dat->elem_size;
  int dat6 = args[6].dat->elem_size;


  //set up initial pointers
  int *p_a0 = (int *)args[0].data;
  int *p_a1 = (int *)args[1].data;
  int *p_a2 = (int *)args[2].data;
  int *p_a3 = NULL;

  long long int base4 = args[4].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) * start[0] * args[4].stencil->stride[0];
  base4 = base4 + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    start[1] * args[4].stencil->stride[1];
  base4 = base4 + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    start[2] * args[4].stencil->stride[2];
  #ifdef OPS_GPU
  float *p_a4 = (float *)((char *)args[4].data_d + base4);
  #else
  float *p_a4 = (float *)((char *)args[4].data + base4);
  #endif

  long long int base5 = args[5].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) * start[0] * args[5].stencil->stride[0];
  base5 = base5 + (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) *
    args[5].dat->size[0] *
    start[1] * args[5].stencil->stride[1];
  base5 = base5 + (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    start[2] * args[5].stencil->stride[2];
  #ifdef OPS_GPU
  float *p_a5 = (float *)((char *)args[5].data_d + base5);
  #else
  float *p_a5 = (float *)((char *)args[5].data + base5);
  #endif

  long long int base6 = args[6].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) * start[0] * args[6].stencil->stride[0];
  base6 = base6 + (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) *
    args[6].dat->size[0] *
    start[1] * args[6].stencil->stride[1];
  base6 = base6 + (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    start[2] * args[6].stencil->stride[2];
  #ifdef OPS_GPU
  float *p_a6 = (float *)((char *)args[6].data_d + base6);
  #else
  float *p_a6 = (float *)((char *)args[6].data + base6);
  #endif


  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  //initialize global variable with the dimension of dats
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  if (xdim4 != xdim4_rtm_kernel_populate_h || ydim4 != ydim4_rtm_kernel_populate_h || xdim5 != xdim5_rtm_kernel_populate_h || ydim5 != ydim5_rtm_kernel_populate_h || xdim6 != xdim6_rtm_kernel_populate_h || ydim6 != ydim6_rtm_kernel_populate_h) {
    xdim4_rtm_kernel_populate = xdim4;
    xdim4_rtm_kernel_populate_h = xdim4;
    ydim4_rtm_kernel_populate = ydim4;
    ydim4_rtm_kernel_populate_h = ydim4;
    xdim5_rtm_kernel_populate = xdim5;
    xdim5_rtm_kernel_populate_h = xdim5;
    ydim5_rtm_kernel_populate = ydim5;
    ydim5_rtm_kernel_populate_h = ydim5;
    xdim6_rtm_kernel_populate = xdim6;
    xdim6_rtm_kernel_populate_h = xdim6;
    ydim6_rtm_kernel_populate = ydim6;
    ydim6_rtm_kernel_populate_h = ydim6;
  }

  //Halo Exchanges

  #ifdef OPS_GPU
  ops_H_D_exchanges_device(args, 7);
  #else
  ops_H_D_exchanges_host(args, 7);
  #endif
  ops_halo_exchanges(args,7,range);

  #ifdef OPS_GPU
  ops_H_D_exchanges_device(args, 7);
  #else
  ops_H_D_exchanges_host(args, 7);
  #endif
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
  }

  rtm_kernel_populate_c_wrapper(
    *p_a0,
    *p_a1,
    *p_a2,
    p_a3,
    p_a4,
    p_a5,
    p_a6,
    arg_idx[0], arg_idx[1], arg_idx[2],
    x_size, y_size, z_size);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[0].time += t1-t2;
  }
  #ifdef OPS_GPU
  ops_set_dirtybit_device(args, 7);
  #else
  ops_set_dirtybit_host(args, 7);
  #endif
  ops_set_halo_dirtybit3(&args[4],range);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);

  if (block->instance->OPS_diags > 1) {
    //Update kernel record
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[0].mpi_time += t2-t1;
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[0].transfer += ops_compute_transfer(dim, start, end, &arg6);
  }
}

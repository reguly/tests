//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#define OPS_3D
#define OPS_API 2
#define OPS_NO_GLOBALS
#include "ops_macros.h"
#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5

//user function

void final_update_kernel(const int *idx,
  const float *dt,
  const ptrm_float  k1,
  const ptrm_float  k2,
  const ptrm_float  k3,
  ptrm_float  k4,
  ptrm_float  yy)
{
  for (int i = 0; i<6; i++) {

    OPS_ACCM(k4, i,0,0,0) = OPS_ACCM(k4, i,0,0,0)* *dt;

    OPS_ACCM(yy, i,0,0,0) = OPS_ACCM(yy, i,0,0,0) +
      OPS_ACCM(k1, i,0,0,0)/6.f +
      OPS_ACCM(k2, i,0,0,0)/3.f +
      OPS_ACCM(k3, i,0,0,0)/3.f +
      OPS_ACCM(k4, i,0,0,0)/6.f;

  }
}


__kernel void ops_final_update_kernel(
const float arg1,
__global const float* restrict arg2,
__global const float* restrict arg3,
__global const float* restrict arg4,
__global float* restrict arg5,
__global float* restrict arg6,
const int base2,
const int base3,
const int base4,
const int base5,
const int base6,
int arg_idx0, int arg_idx1, int arg_idx2,
const int size0,
const int size1,
const int size2 ){


  int idx_y = get_global_id(1);
  int idx_z = get_global_id(2);
  int idx_x = get_global_id(0);

  int arg_idx[3];
  arg_idx[0] = arg_idx0+idx_x;
  arg_idx[1] = arg_idx1+idx_y;
  arg_idx[2] = arg_idx2+idx_z;
  if (idx_x < size0 && idx_y < size1 && idx_z < size2) {
    #ifdef OPS_SOA
    const ptrm_float ptr2 = { &arg2[base2 + idx_x * 1 + idx_y * 1 * xdim2_final_update_kernel + idx_z * 1 * xdim2_final_update_kernel * ydim2_final_update_kernel], xdim2_final_update_kernel, ydim2_final_update_kernel, zdim2_final_update_kernel};
    #else
    const ptrm_float ptr2 = { &arg2[base2 + idx_x * 1 + idx_y * 1 * xdim2_final_update_kernel + idx_z * 1 * xdim2_final_update_kernel * ydim2_final_update_kernel], xdim2_final_update_kernel, ydim2_final_update_kernel, 6};
    #endif
    #ifdef OPS_SOA
    const ptrm_float ptr3 = { &arg3[base3 + idx_x * 1 + idx_y * 1 * xdim3_final_update_kernel + idx_z * 1 * xdim3_final_update_kernel * ydim3_final_update_kernel], xdim3_final_update_kernel, ydim3_final_update_kernel, zdim3_final_update_kernel};
    #else
    const ptrm_float ptr3 = { &arg3[base3 + idx_x * 1 + idx_y * 1 * xdim3_final_update_kernel + idx_z * 1 * xdim3_final_update_kernel * ydim3_final_update_kernel], xdim3_final_update_kernel, ydim3_final_update_kernel, 6};
    #endif
    #ifdef OPS_SOA
    const ptrm_float ptr4 = { &arg4[base4 + idx_x * 1 + idx_y * 1 * xdim4_final_update_kernel + idx_z * 1 * xdim4_final_update_kernel * ydim4_final_update_kernel], xdim4_final_update_kernel, ydim4_final_update_kernel, zdim4_final_update_kernel};
    #else
    const ptrm_float ptr4 = { &arg4[base4 + idx_x * 1 + idx_y * 1 * xdim4_final_update_kernel + idx_z * 1 * xdim4_final_update_kernel * ydim4_final_update_kernel], xdim4_final_update_kernel, ydim4_final_update_kernel, 6};
    #endif
    #ifdef OPS_SOA
    ptrm_float ptr5 = { &arg5[base5 + idx_x * 1 + idx_y * 1 * xdim5_final_update_kernel + idx_z * 1 * xdim5_final_update_kernel * ydim5_final_update_kernel], xdim5_final_update_kernel, ydim5_final_update_kernel, zdim5_final_update_kernel};
    #else
    ptrm_float ptr5 = { &arg5[base5 + idx_x * 1 + idx_y * 1 * xdim5_final_update_kernel + idx_z * 1 * xdim5_final_update_kernel * ydim5_final_update_kernel], xdim5_final_update_kernel, ydim5_final_update_kernel, 6};
    #endif
    #ifdef OPS_SOA
    ptrm_float ptr6 = { &arg6[base6 + idx_x * 1 + idx_y * 1 * xdim6_final_update_kernel + idx_z * 1 * xdim6_final_update_kernel * ydim6_final_update_kernel], xdim6_final_update_kernel, ydim6_final_update_kernel, zdim6_final_update_kernel};
    #else
    ptrm_float ptr6 = { &arg6[base6 + idx_x * 1 + idx_y * 1 * xdim6_final_update_kernel + idx_z * 1 * xdim6_final_update_kernel * ydim6_final_update_kernel], xdim6_final_update_kernel, ydim6_final_update_kernel, 6};
    #endif
    final_update_kernel(arg_idx,
                        &arg1,
                        ptr2,
                        ptr3,
                        ptr4,
                        ptr5,
                        ptr6);
  }

}

//
// auto-generated by ops.py
//

extern int xdim2_final_update_kernel;
int xdim2_final_update_kernel_h = -1;
extern int ydim2_final_update_kernel;
int ydim2_final_update_kernel_h = -1;
extern int zdim2_final_update_kernel;
int zdim2_final_update_kernel_h = -1;
extern int xdim3_final_update_kernel;
int xdim3_final_update_kernel_h = -1;
extern int ydim3_final_update_kernel;
int ydim3_final_update_kernel_h = -1;
extern int zdim3_final_update_kernel;
int zdim3_final_update_kernel_h = -1;
extern int xdim4_final_update_kernel;
int xdim4_final_update_kernel_h = -1;
extern int ydim4_final_update_kernel;
int ydim4_final_update_kernel_h = -1;
extern int zdim4_final_update_kernel;
int zdim4_final_update_kernel_h = -1;
extern int xdim5_final_update_kernel;
int xdim5_final_update_kernel_h = -1;
extern int ydim5_final_update_kernel;
int ydim5_final_update_kernel_h = -1;
extern int zdim5_final_update_kernel;
int zdim5_final_update_kernel_h = -1;
extern int xdim6_final_update_kernel;
int xdim6_final_update_kernel_h = -1;
extern int ydim6_final_update_kernel;
int ydim6_final_update_kernel_h = -1;
extern int zdim6_final_update_kernel;
int zdim6_final_update_kernel_h = -1;

#ifdef __cplusplus
extern "C" {
#endif
void final_update_kernel_c_wrapper(
  int *p_a0,
  float *p_a1,
  float *p_a2,
  float *p_a3,
  float *p_a4,
  float *p_a5,
  float *p_a6,
  int arg_idx0, int arg_idx1, int arg_idx2,
  int x_size, int y_size, int z_size);

#ifdef __cplusplus
}
#endif

// host stub function
void ops_par_loop_final_update_kernel(char const *name, ops_block block, int dim, int* range,
 ops_arg arg0, ops_arg arg1, ops_arg arg2, ops_arg arg3, ops_arg arg4, ops_arg arg5, ops_arg arg6) {

  ops_arg args[7] = { arg0, arg1, arg2, arg3, arg4, arg5, arg6};


  #ifdef CHECKPOINTING
  if (!ops_checkpointing_before(args,7,range,4)) return;
  #endif

  if (block->instance->OPS_diags > 1) {
    ops_timing_realloc(block->instance,4,"final_update_kernel");
    block->instance->OPS_kernels[4].count++;
  }

  //compute localy allocated range for the sub-block
  int start[3];
  int end[3];
  int arg_idx[3];

  #ifdef OPS_MPI
  if (compute_ranges(args, 7,block, range, start, end, arg_idx) < 0) return;
  #else
  for ( int n=0; n<3; n++ ){
    start[n] = range[2*n];end[n] = range[2*n+1];
    arg_idx[n] = start[n];
  }
  #endif

  int x_size = MAX(0,end[0]-start[0]);
  int y_size = MAX(0,end[1]-start[1]);
  int z_size = MAX(0,end[2]-start[2]);

  int xdim2 = args[2].dat->size[0];
  int ydim2 = args[2].dat->size[1];
  int zdim2 = args[2].dat->size[2];
  int xdim3 = args[3].dat->size[0];
  int ydim3 = args[3].dat->size[1];
  int zdim3 = args[3].dat->size[2];
  int xdim4 = args[4].dat->size[0];
  int ydim4 = args[4].dat->size[1];
  int zdim4 = args[4].dat->size[2];
  int xdim5 = args[5].dat->size[0];
  int ydim5 = args[5].dat->size[1];
  int zdim5 = args[5].dat->size[2];
  int xdim6 = args[6].dat->size[0];
  int ydim6 = args[6].dat->size[1];
  int zdim6 = args[6].dat->size[2];

  //Timing
  double t1,t2,c1,c2;
  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
  }

  if (xdim2 != xdim2_final_update_kernel_h || ydim2 != ydim2_final_update_kernel_h || zdim2 != zdim2_final_update_kernel_h || xdim3 != xdim3_final_update_kernel_h || ydim3 != ydim3_final_update_kernel_h || zdim3 != zdim3_final_update_kernel_h || xdim4 != xdim4_final_update_kernel_h || ydim4 != ydim4_final_update_kernel_h || zdim4 != zdim4_final_update_kernel_h || xdim5 != xdim5_final_update_kernel_h || ydim5 != ydim5_final_update_kernel_h || zdim5 != zdim5_final_update_kernel_h || xdim6 != xdim6_final_update_kernel_h || ydim6 != ydim6_final_update_kernel_h || zdim6 != zdim6_final_update_kernel_h) {
    xdim2_final_update_kernel = xdim2;
    xdim2_final_update_kernel_h = xdim2;
    ydim2_final_update_kernel = ydim2;
    ydim2_final_update_kernel_h = ydim2;
    zdim2_final_update_kernel = zdim2;
    zdim2_final_update_kernel_h = zdim2;
    xdim3_final_update_kernel = xdim3;
    xdim3_final_update_kernel_h = xdim3;
    ydim3_final_update_kernel = ydim3;
    ydim3_final_update_kernel_h = ydim3;
    zdim3_final_update_kernel = zdim3;
    zdim3_final_update_kernel_h = zdim3;
    xdim4_final_update_kernel = xdim4;
    xdim4_final_update_kernel_h = xdim4;
    ydim4_final_update_kernel = ydim4;
    ydim4_final_update_kernel_h = ydim4;
    zdim4_final_update_kernel = zdim4;
    zdim4_final_update_kernel_h = zdim4;
    xdim5_final_update_kernel = xdim5;
    xdim5_final_update_kernel_h = xdim5;
    ydim5_final_update_kernel = ydim5;
    ydim5_final_update_kernel_h = ydim5;
    zdim5_final_update_kernel = zdim5;
    zdim5_final_update_kernel_h = zdim5;
    xdim6_final_update_kernel = xdim6;
    xdim6_final_update_kernel_h = xdim6;
    ydim6_final_update_kernel = ydim6;
    ydim6_final_update_kernel_h = ydim6;
    zdim6_final_update_kernel = zdim6;
    zdim6_final_update_kernel_h = zdim6;
  }



  //set up initial pointers and exchange halos if necessary
  int *p_a0 = NULL;

  float *p_a1 = (float *)args[1].data;


  long long int base2 = args[2].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) * start[0] * args[2].stencil->stride[0];
  base2 = base2+ (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) *
    args[2].dat->size[0] *
    start[1] * args[2].stencil->stride[1];
  base2 = base2+ (long long int)(block->instance->OPS_soa ? args[2].dat->type_size : args[2].dat->elem_size) *
    args[2].dat->size[0] *
    args[2].dat->size[1] *
    start[2] * args[2].stencil->stride[2];
  float *p_a2 = (float *)(args[2].data + base2);

  long long int base3 = args[3].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) * start[0] * args[3].stencil->stride[0];
  base3 = base3+ (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) *
    args[3].dat->size[0] *
    start[1] * args[3].stencil->stride[1];
  base3 = base3+ (long long int)(block->instance->OPS_soa ? args[3].dat->type_size : args[3].dat->elem_size) *
    args[3].dat->size[0] *
    args[3].dat->size[1] *
    start[2] * args[3].stencil->stride[2];
  float *p_a3 = (float *)(args[3].data + base3);

  long long int base4 = args[4].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) * start[0] * args[4].stencil->stride[0];
  base4 = base4+ (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    start[1] * args[4].stencil->stride[1];
  base4 = base4+ (long long int)(block->instance->OPS_soa ? args[4].dat->type_size : args[4].dat->elem_size) *
    args[4].dat->size[0] *
    args[4].dat->size[1] *
    start[2] * args[4].stencil->stride[2];
  float *p_a4 = (float *)(args[4].data + base4);

  long long int base5 = args[5].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) * start[0] * args[5].stencil->stride[0];
  base5 = base5+ (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) *
    args[5].dat->size[0] *
    start[1] * args[5].stencil->stride[1];
  base5 = base5+ (long long int)(block->instance->OPS_soa ? args[5].dat->type_size : args[5].dat->elem_size) *
    args[5].dat->size[0] *
    args[5].dat->size[1] *
    start[2] * args[5].stencil->stride[2];
  float *p_a5 = (float *)(args[5].data + base5);

  long long int base6 = args[6].dat->base_offset + (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) * start[0] * args[6].stencil->stride[0];
  base6 = base6+ (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) *
    args[6].dat->size[0] *
    start[1] * args[6].stencil->stride[1];
  base6 = base6+ (long long int)(block->instance->OPS_soa ? args[6].dat->type_size : args[6].dat->elem_size) *
    args[6].dat->size[0] *
    args[6].dat->size[1] *
    start[2] * args[6].stencil->stride[2];
  float *p_a6 = (float *)(args[6].data + base6);



  ops_H_D_exchanges_host(args, 7);
  ops_halo_exchanges(args,7,range);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c1,&t1);
    block->instance->OPS_kernels[4].mpi_time += t1-t2;
  }

  final_update_kernel_c_wrapper(
    p_a0,
    p_a1,
    p_a2,
    p_a3,
    p_a4,
    p_a5,
    p_a6,
    arg_idx[0], arg_idx[1], arg_idx[2],
    x_size, y_size, z_size);

  if (block->instance->OPS_diags > 1) {
    ops_timers_core(&c2,&t2);
    block->instance->OPS_kernels[4].time += t2-t1;
  }
  ops_set_dirtybit_host(args, 7);
  ops_set_halo_dirtybit3(&args[5],range);
  ops_set_halo_dirtybit3(&args[6],range);

  //Update kernel record
  if (block->instance->OPS_diags > 1) {
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg2);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg3);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg4);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg5);
    block->instance->OPS_kernels[4].transfer += ops_compute_transfer(dim, start, end, &arg6);
  }
}

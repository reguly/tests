//
// auto-generated by ops.py//

//header
#define OPS_API 2
#define OPS_3D
#define OPS_SOA
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
__constant__ float dx;
__constant__ float dz;
__constant__ float invdx;
__constant__ float invdy;
__constant__ float invdz;
__constant__ int nx;
__constant__ int ny;
__constant__ int nz;
__constant__ int pml_width;
__constant__ int xbeg;
__constant__ int ybeg;
__constant__ int zbeg;
__constant__ int xend;
__constant__ int yend;
__constant__ int zend;
__constant__ int xpmlbeg;
__constant__ int ypmlbeg;
__constant__ int zpmlbeg;
__constant__ int xpmlend;
__constant__ int ypmlend;
__constant__ int zpmlend;
__constant__ float *coeffs;
__constant__ int halff;
__constant__ int order;
__constant__ float *c;
__constant__ float *cx;
__constant__ float *cy;
__constant__ float *cz;

void ops_init_backend() {}

void ops_decl_const_char(OPS_instance *instance, int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(instance);
  if (!strcmp(name,"dx")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(dx, dat, dim*size));
  }
  else
  if (!strcmp(name,"dz")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(dz, dat, dim*size));
  }
  else
  if (!strcmp(name,"invdx")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(invdx, dat, dim*size));
  }
  else
  if (!strcmp(name,"invdy")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(invdy, dat, dim*size));
  }
  else
  if (!strcmp(name,"invdz")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(invdz, dat, dim*size));
  }
  else
  if (!strcmp(name,"nx")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(nx, dat, dim*size));
  }
  else
  if (!strcmp(name,"ny")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(ny, dat, dim*size));
  }
  else
  if (!strcmp(name,"nz")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(nz, dat, dim*size));
  }
  else
  if (!strcmp(name,"pml_width")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(pml_width, dat, dim*size));
  }
  else
  if (!strcmp(name,"xbeg")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(xbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"ybeg")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(ybeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"zbeg")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(zbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"xend")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(xend, dat, dim*size));
  }
  else
  if (!strcmp(name,"yend")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(yend, dat, dim*size));
  }
  else
  if (!strcmp(name,"zend")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(zend, dat, dim*size));
  }
  else
  if (!strcmp(name,"xpmlbeg")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(xpmlbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"ypmlbeg")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(ypmlbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"zpmlbeg")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(zpmlbeg, dat, dim*size));
  }
  else
  if (!strcmp(name,"xpmlend")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(xpmlend, dat, dim*size));
  }
  else
  if (!strcmp(name,"ypmlend")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(ypmlend, dat, dim*size));
  }
  else
  if (!strcmp(name,"zpmlend")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(zpmlend, dat, dim*size));
  }
  else
  if (!strcmp(name,"coeffs")) {
    char *temp; hipSafeCall(instance->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(instance->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(coeffs, &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"halff")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(halff, dat, dim*size));
  }
  else
  if (!strcmp(name,"order")) {
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(order, dat, dim*size));
  }
  else
  if (!strcmp(name,"c")) {
    char *temp; hipSafeCall(instance->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(instance->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(c, &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cx")) {
    char *temp; hipSafeCall(instance->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(instance->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(cx, &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cy")) {
    char *temp; hipSafeCall(instance->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(instance->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(cy, &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cz")) {
    char *temp; hipSafeCall(instance->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(instance->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(instance->ostream(),hipMemcpyToSymbol(cz, &temp, sizeof(char *)));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "rtm_kernel_populate_hip_kernel.cpp"
#include "fd3d_pml_kernel_hip_kernel.cpp"
#include "calc_ytemp_kernel_hip_kernel.cpp"
#include "calc_ytemp2_kernel_hip_kernel.cpp"
#include "final_update_kernel_hip_kernel.cpp"

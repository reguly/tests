//
// auto-generated by ops.py//

//header
#include <hip/hip_runtime.h>
#define OPS_API 2
#define OPS_3D
#define OPS_SOA
#include "ops_lib_core.h"

#include "ops_hip_rt_support.h"
#include "ops_hip_reduction.h"


#ifdef OPS_MPI
#include "ops_mpi_core.h"
#endif
// global constants
#define dx dx_OPSCONSTANT
__constant__ float dx;
#define dz dz_OPSCONSTANT
__constant__ float dz;
#define invdx invdx_OPSCONSTANT
__constant__ float invdx;
#define invdy invdy_OPSCONSTANT
__constant__ float invdy;
#define invdz invdz_OPSCONSTANT
__constant__ float invdz;
#define nx nx_OPSCONSTANT
__constant__ int nx;
#define ny ny_OPSCONSTANT
__constant__ int ny;
#define nz nz_OPSCONSTANT
__constant__ int nz;
#define pml_width pml_width_OPSCONSTANT
__constant__ int pml_width;
#define xbeg xbeg_OPSCONSTANT
__constant__ int xbeg;
#define ybeg ybeg_OPSCONSTANT
__constant__ int ybeg;
#define zbeg zbeg_OPSCONSTANT
__constant__ int zbeg;
#define xend xend_OPSCONSTANT
__constant__ int xend;
#define yend yend_OPSCONSTANT
__constant__ int yend;
#define zend zend_OPSCONSTANT
__constant__ int zend;
#define xpmlbeg xpmlbeg_OPSCONSTANT
__constant__ int xpmlbeg;
#define ypmlbeg ypmlbeg_OPSCONSTANT
__constant__ int ypmlbeg;
#define zpmlbeg zpmlbeg_OPSCONSTANT
__constant__ int zpmlbeg;
#define xpmlend xpmlend_OPSCONSTANT
__constant__ int xpmlend;
#define ypmlend ypmlend_OPSCONSTANT
__constant__ int ypmlend;
#define zpmlend zpmlend_OPSCONSTANT
__constant__ int zpmlend;
#define coeffs coeffs_OPSCONSTANT
__constant__ float *coeffs;
#define halff halff_OPSCONSTANT
__constant__ int halff;
#define order order_OPSCONSTANT
__constant__ int order;
#define c c_OPSCONSTANT
__constant__ float *c;
#define cx cx_OPSCONSTANT
__constant__ float *cx;
#define cy cy_OPSCONSTANT
__constant__ float *cy;
#define cz cz_OPSCONSTANT
__constant__ float *cz;

void ops_init_backend() {}

//Dummy kernel to make sure constants are not optimized out
__global__ void ops_internal_this_is_stupid() {
((int*)&dx)[0]=0;
((int*)&dz)[0]=0;
((int*)&invdx)[0]=0;
((int*)&invdy)[0]=0;
((int*)&invdz)[0]=0;
((int*)&nx)[0]=0;
((int*)&ny)[0]=0;
((int*)&nz)[0]=0;
((int*)&pml_width)[0]=0;
((int*)&xbeg)[0]=0;
((int*)&ybeg)[0]=0;
((int*)&zbeg)[0]=0;
((int*)&xend)[0]=0;
((int*)&yend)[0]=0;
((int*)&zend)[0]=0;
((int*)&xpmlbeg)[0]=0;
((int*)&ypmlbeg)[0]=0;
((int*)&zpmlbeg)[0]=0;
((int*)&xpmlend)[0]=0;
((int*)&ypmlend)[0]=0;
((int*)&zpmlend)[0]=0;
((int*)&coeffs)[0]=0;
((int*)&halff)[0]=0;
((int*)&order)[0]=0;
((int*)&c)[0]=0;
((int*)&cx)[0]=0;
((int*)&cy)[0]=0;
((int*)&cz)[0]=0;
}

void ops_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  ops_execute(OPS_instance::getOPSInstance());
  if (!strcmp(name,"dx")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dx_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"dz")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(dz_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invdx")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invdx_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invdy")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invdy_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"invdz")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(invdz_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"nx")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(nx_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"ny")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(ny_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"nz")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(nz_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"pml_width")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(pml_width_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"xbeg")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(xbeg_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"ybeg")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(ybeg_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"zbeg")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(zbeg_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"xend")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(xend_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"yend")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(yend_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"zend")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(zend_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"xpmlbeg")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(xpmlbeg_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"ypmlbeg")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(ypmlbeg_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"zpmlbeg")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(zpmlbeg_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"xpmlend")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(xpmlend_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"ypmlend")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(ypmlend_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"zpmlend")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(zpmlend_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"coeffs")) {
    char *temp; hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(coeffs_OPSCONSTANT), &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"halff")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(halff_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"order")) {
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(order_OPSCONSTANT), dat, dim*size));
  }
  else
  if (!strcmp(name,"c")) {
    char *temp; hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(c_OPSCONSTANT), &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cx")) {
    char *temp; hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cx_OPSCONSTANT), &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cy")) {
    char *temp; hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cy_OPSCONSTANT), &temp, sizeof(char *)));
  }
  else
  if (!strcmp(name,"cz")) {
    char *temp; hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMalloc((void**)&temp,dim*size));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpy(temp,dat,dim*size,hipMemcpyHostToDevice));
    hipSafeCall(OPS_instance::getOPSInstance()->ostream(),hipMemcpyToSymbol(HIP_SYMBOL(cz_OPSCONSTANT), &temp, sizeof(char *)));
  }
  else
  {
    throw OPSException(OPS_RUNTIME_ERROR, "error: unknown const name");
  }
}


//user kernel files
#include "rtm_kernel_populate_hip_kernel.cpp"
#include "fd3d_pml_kernel_hip_kernel.cpp"
#include "calc_ytemp_kernel_hip_kernel.cpp"
#include "calc_ytemp2_kernel_hip_kernel.cpp"
#include "final_update_kernel_hip_kernel.cpp"
